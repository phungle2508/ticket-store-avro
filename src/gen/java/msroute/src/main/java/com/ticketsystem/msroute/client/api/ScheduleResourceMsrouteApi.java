/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ticketsystem.msroute.client.api;

import java.math.BigDecimal;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import com.ticketsystem.msroute.client.model.ScheduleDTODto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "schedule-resource", description = "the schedule-resource API")
public interface ScheduleResourceMsrouteApi {

    /**
     * GET /api/schedules/count
     *
     * @param idEquals  (optional)
     * @param idNotEquals  (optional)
     * @param idSpecified  (optional)
     * @param idIn  (optional)
     * @param idNotIn  (optional)
     * @param departureTimeGreaterThan  (optional)
     * @param departureTimeLessThan  (optional)
     * @param departureTimeGreaterThanOrEqual  (optional)
     * @param departureTimeLessThanOrEqual  (optional)
     * @param departureTimeEquals  (optional)
     * @param departureTimeNotEquals  (optional)
     * @param departureTimeSpecified  (optional)
     * @param departureTimeIn  (optional)
     * @param departureTimeNotIn  (optional)
     * @param arrivalTimeGreaterThan  (optional)
     * @param arrivalTimeLessThan  (optional)
     * @param arrivalTimeGreaterThanOrEqual  (optional)
     * @param arrivalTimeLessThanOrEqual  (optional)
     * @param arrivalTimeEquals  (optional)
     * @param arrivalTimeNotEquals  (optional)
     * @param arrivalTimeSpecified  (optional)
     * @param arrivalTimeIn  (optional)
     * @param arrivalTimeNotIn  (optional)
     * @param totalSeatsGreaterThan  (optional)
     * @param totalSeatsLessThan  (optional)
     * @param totalSeatsGreaterThanOrEqual  (optional)
     * @param totalSeatsLessThanOrEqual  (optional)
     * @param totalSeatsEquals  (optional)
     * @param totalSeatsNotEquals  (optional)
     * @param totalSeatsSpecified  (optional)
     * @param totalSeatsIn  (optional)
     * @param totalSeatsNotIn  (optional)
     * @param availableSeatsGreaterThan  (optional)
     * @param availableSeatsLessThan  (optional)
     * @param availableSeatsGreaterThanOrEqual  (optional)
     * @param availableSeatsLessThanOrEqual  (optional)
     * @param availableSeatsEquals  (optional)
     * @param availableSeatsNotEquals  (optional)
     * @param availableSeatsSpecified  (optional)
     * @param availableSeatsIn  (optional)
     * @param availableSeatsNotIn  (optional)
     * @param basePriceGreaterThan  (optional)
     * @param basePriceLessThan  (optional)
     * @param basePriceGreaterThanOrEqual  (optional)
     * @param basePriceLessThanOrEqual  (optional)
     * @param basePriceEquals  (optional)
     * @param basePriceNotEquals  (optional)
     * @param basePriceSpecified  (optional)
     * @param basePriceIn  (optional)
     * @param basePriceNotIn  (optional)
     * @param isActiveEquals  (optional)
     * @param isActiveNotEquals  (optional)
     * @param isActiveSpecified  (optional)
     * @param isActiveIn  (optional)
     * @param isActiveNotIn  (optional)
     * @param createdAtGreaterThan  (optional)
     * @param createdAtLessThan  (optional)
     * @param createdAtGreaterThanOrEqual  (optional)
     * @param createdAtLessThanOrEqual  (optional)
     * @param createdAtEquals  (optional)
     * @param createdAtNotEquals  (optional)
     * @param createdAtSpecified  (optional)
     * @param createdAtIn  (optional)
     * @param createdAtNotIn  (optional)
     * @param updatedAtGreaterThan  (optional)
     * @param updatedAtLessThan  (optional)
     * @param updatedAtGreaterThanOrEqual  (optional)
     * @param updatedAtLessThanOrEqual  (optional)
     * @param updatedAtEquals  (optional)
     * @param updatedAtNotEquals  (optional)
     * @param updatedAtSpecified  (optional)
     * @param updatedAtIn  (optional)
     * @param updatedAtNotIn  (optional)
     * @param routeIdEquals  (optional)
     * @param routeIdNotEquals  (optional)
     * @param routeIdSpecified  (optional)
     * @param routeIdIn  (optional)
     * @param routeIdNotIn  (optional)
     * @param distinct  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "countSchedules",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Long.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/schedules/count",
        produces = { "*/*" }
    )
    
    ResponseEntity<Long> countSchedules(
        @Parameter(name = "id.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.equals", required = false) UUID idEquals,
        @Parameter(name = "id.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notEquals", required = false) UUID idNotEquals,
        @Parameter(name = "id.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,
        @Parameter(name = "id.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.in", required = false) List<UUID> idIn,
        @Parameter(name = "id.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notIn", required = false) List<UUID> idNotIn,
        @Parameter(name = "departureTime.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeGreaterThan,
        @Parameter(name = "departureTime.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeLessThan,
        @Parameter(name = "departureTime.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeGreaterThanOrEqual,
        @Parameter(name = "departureTime.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeLessThanOrEqual,
        @Parameter(name = "departureTime.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeEquals,
        @Parameter(name = "departureTime.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeNotEquals,
        @Parameter(name = "departureTime.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.specified", required = false) Boolean departureTimeSpecified,
        @Parameter(name = "departureTime.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.in", required = false) List<OffsetDateTime> departureTimeIn,
        @Parameter(name = "departureTime.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.notIn", required = false) List<OffsetDateTime> departureTimeNotIn,
        @Parameter(name = "arrivalTime.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeGreaterThan,
        @Parameter(name = "arrivalTime.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeLessThan,
        @Parameter(name = "arrivalTime.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeGreaterThanOrEqual,
        @Parameter(name = "arrivalTime.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeLessThanOrEqual,
        @Parameter(name = "arrivalTime.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeEquals,
        @Parameter(name = "arrivalTime.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeNotEquals,
        @Parameter(name = "arrivalTime.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.specified", required = false) Boolean arrivalTimeSpecified,
        @Parameter(name = "arrivalTime.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.in", required = false) List<OffsetDateTime> arrivalTimeIn,
        @Parameter(name = "arrivalTime.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.notIn", required = false) List<OffsetDateTime> arrivalTimeNotIn,
        @Parameter(name = "totalSeats.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.greaterThan", required = false) Integer totalSeatsGreaterThan,
        @Parameter(name = "totalSeats.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.lessThan", required = false) Integer totalSeatsLessThan,
        @Parameter(name = "totalSeats.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.greaterThanOrEqual", required = false) Integer totalSeatsGreaterThanOrEqual,
        @Parameter(name = "totalSeats.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.lessThanOrEqual", required = false) Integer totalSeatsLessThanOrEqual,
        @Parameter(name = "totalSeats.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.equals", required = false) Integer totalSeatsEquals,
        @Parameter(name = "totalSeats.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.notEquals", required = false) Integer totalSeatsNotEquals,
        @Parameter(name = "totalSeats.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.specified", required = false) Boolean totalSeatsSpecified,
        @Parameter(name = "totalSeats.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.in", required = false) List<Integer> totalSeatsIn,
        @Parameter(name = "totalSeats.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.notIn", required = false) List<Integer> totalSeatsNotIn,
        @Parameter(name = "availableSeats.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.greaterThan", required = false) Integer availableSeatsGreaterThan,
        @Parameter(name = "availableSeats.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.lessThan", required = false) Integer availableSeatsLessThan,
        @Parameter(name = "availableSeats.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.greaterThanOrEqual", required = false) Integer availableSeatsGreaterThanOrEqual,
        @Parameter(name = "availableSeats.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.lessThanOrEqual", required = false) Integer availableSeatsLessThanOrEqual,
        @Parameter(name = "availableSeats.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.equals", required = false) Integer availableSeatsEquals,
        @Parameter(name = "availableSeats.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.notEquals", required = false) Integer availableSeatsNotEquals,
        @Parameter(name = "availableSeats.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.specified", required = false) Boolean availableSeatsSpecified,
        @Parameter(name = "availableSeats.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.in", required = false) List<Integer> availableSeatsIn,
        @Parameter(name = "availableSeats.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.notIn", required = false) List<Integer> availableSeatsNotIn,
        @Parameter(name = "basePrice.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.greaterThan", required = false) BigDecimal basePriceGreaterThan,
        @Parameter(name = "basePrice.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.lessThan", required = false) BigDecimal basePriceLessThan,
        @Parameter(name = "basePrice.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.greaterThanOrEqual", required = false) BigDecimal basePriceGreaterThanOrEqual,
        @Parameter(name = "basePrice.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.lessThanOrEqual", required = false) BigDecimal basePriceLessThanOrEqual,
        @Parameter(name = "basePrice.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.equals", required = false) BigDecimal basePriceEquals,
        @Parameter(name = "basePrice.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.notEquals", required = false) BigDecimal basePriceNotEquals,
        @Parameter(name = "basePrice.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.specified", required = false) Boolean basePriceSpecified,
        @Parameter(name = "basePrice.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.in", required = false) List<BigDecimal> basePriceIn,
        @Parameter(name = "basePrice.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.notIn", required = false) List<BigDecimal> basePriceNotIn,
        @Parameter(name = "isActive.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.equals", required = false) Boolean isActiveEquals,
        @Parameter(name = "isActive.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notEquals", required = false) Boolean isActiveNotEquals,
        @Parameter(name = "isActive.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.specified", required = false) Boolean isActiveSpecified,
        @Parameter(name = "isActive.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.in", required = false) List<Boolean> isActiveIn,
        @Parameter(name = "isActive.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notIn", required = false) List<Boolean> isActiveNotIn,
        @Parameter(name = "createdAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThan,
        @Parameter(name = "createdAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThan,
        @Parameter(name = "createdAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThanOrEqual,
        @Parameter(name = "createdAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThanOrEqual,
        @Parameter(name = "createdAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtEquals,
        @Parameter(name = "createdAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtNotEquals,
        @Parameter(name = "createdAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.specified", required = false) Boolean createdAtSpecified,
        @Parameter(name = "createdAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.in", required = false) List<OffsetDateTime> createdAtIn,
        @Parameter(name = "createdAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notIn", required = false) List<OffsetDateTime> createdAtNotIn,
        @Parameter(name = "updatedAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThan,
        @Parameter(name = "updatedAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThan,
        @Parameter(name = "updatedAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThanOrEqual,
        @Parameter(name = "updatedAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThanOrEqual,
        @Parameter(name = "updatedAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtEquals,
        @Parameter(name = "updatedAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtNotEquals,
        @Parameter(name = "updatedAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.specified", required = false) Boolean updatedAtSpecified,
        @Parameter(name = "updatedAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.in", required = false) List<OffsetDateTime> updatedAtIn,
        @Parameter(name = "updatedAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notIn", required = false) List<OffsetDateTime> updatedAtNotIn,
        @Parameter(name = "routeId.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.equals", required = false) UUID routeIdEquals,
        @Parameter(name = "routeId.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.notEquals", required = false) UUID routeIdNotEquals,
        @Parameter(name = "routeId.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.specified", required = false) Boolean routeIdSpecified,
        @Parameter(name = "routeId.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.in", required = false) List<UUID> routeIdIn,
        @Parameter(name = "routeId.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.notIn", required = false) List<UUID> routeIdNotIn,
        @Parameter(name = "distinct", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distinct", required = false) Boolean distinct
    );


    /**
     * POST /api/schedules
     *
     * @param scheduleDTODto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createSchedule",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ScheduleDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/schedules",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ScheduleDTODto> createSchedule(
        @Parameter(name = "ScheduleDTODto", description = "", required = true) @Valid @RequestBody ScheduleDTODto scheduleDTODto
    );


    /**
     * DELETE /api/schedules/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteSchedule",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/schedules/{id}"
    )
    
    ResponseEntity<Void> deleteSchedule(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/schedules
     *
     * @param idEquals  (optional)
     * @param idNotEquals  (optional)
     * @param idSpecified  (optional)
     * @param idIn  (optional)
     * @param idNotIn  (optional)
     * @param departureTimeGreaterThan  (optional)
     * @param departureTimeLessThan  (optional)
     * @param departureTimeGreaterThanOrEqual  (optional)
     * @param departureTimeLessThanOrEqual  (optional)
     * @param departureTimeEquals  (optional)
     * @param departureTimeNotEquals  (optional)
     * @param departureTimeSpecified  (optional)
     * @param departureTimeIn  (optional)
     * @param departureTimeNotIn  (optional)
     * @param arrivalTimeGreaterThan  (optional)
     * @param arrivalTimeLessThan  (optional)
     * @param arrivalTimeGreaterThanOrEqual  (optional)
     * @param arrivalTimeLessThanOrEqual  (optional)
     * @param arrivalTimeEquals  (optional)
     * @param arrivalTimeNotEquals  (optional)
     * @param arrivalTimeSpecified  (optional)
     * @param arrivalTimeIn  (optional)
     * @param arrivalTimeNotIn  (optional)
     * @param totalSeatsGreaterThan  (optional)
     * @param totalSeatsLessThan  (optional)
     * @param totalSeatsGreaterThanOrEqual  (optional)
     * @param totalSeatsLessThanOrEqual  (optional)
     * @param totalSeatsEquals  (optional)
     * @param totalSeatsNotEquals  (optional)
     * @param totalSeatsSpecified  (optional)
     * @param totalSeatsIn  (optional)
     * @param totalSeatsNotIn  (optional)
     * @param availableSeatsGreaterThan  (optional)
     * @param availableSeatsLessThan  (optional)
     * @param availableSeatsGreaterThanOrEqual  (optional)
     * @param availableSeatsLessThanOrEqual  (optional)
     * @param availableSeatsEquals  (optional)
     * @param availableSeatsNotEquals  (optional)
     * @param availableSeatsSpecified  (optional)
     * @param availableSeatsIn  (optional)
     * @param availableSeatsNotIn  (optional)
     * @param basePriceGreaterThan  (optional)
     * @param basePriceLessThan  (optional)
     * @param basePriceGreaterThanOrEqual  (optional)
     * @param basePriceLessThanOrEqual  (optional)
     * @param basePriceEquals  (optional)
     * @param basePriceNotEquals  (optional)
     * @param basePriceSpecified  (optional)
     * @param basePriceIn  (optional)
     * @param basePriceNotIn  (optional)
     * @param isActiveEquals  (optional)
     * @param isActiveNotEquals  (optional)
     * @param isActiveSpecified  (optional)
     * @param isActiveIn  (optional)
     * @param isActiveNotIn  (optional)
     * @param createdAtGreaterThan  (optional)
     * @param createdAtLessThan  (optional)
     * @param createdAtGreaterThanOrEqual  (optional)
     * @param createdAtLessThanOrEqual  (optional)
     * @param createdAtEquals  (optional)
     * @param createdAtNotEquals  (optional)
     * @param createdAtSpecified  (optional)
     * @param createdAtIn  (optional)
     * @param createdAtNotIn  (optional)
     * @param updatedAtGreaterThan  (optional)
     * @param updatedAtLessThan  (optional)
     * @param updatedAtGreaterThanOrEqual  (optional)
     * @param updatedAtLessThanOrEqual  (optional)
     * @param updatedAtEquals  (optional)
     * @param updatedAtNotEquals  (optional)
     * @param updatedAtSpecified  (optional)
     * @param updatedAtIn  (optional)
     * @param updatedAtNotIn  (optional)
     * @param routeIdEquals  (optional)
     * @param routeIdNotEquals  (optional)
     * @param routeIdSpecified  (optional)
     * @param routeIdIn  (optional)
     * @param routeIdNotIn  (optional)
     * @param distinct  (optional)
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 20)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllSchedules",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ScheduleDTODto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/schedules",
        produces = { "*/*" }
    )
    
    ResponseEntity<List<ScheduleDTODto>> getAllSchedules(
        @Parameter(name = "id.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.equals", required = false) UUID idEquals,
        @Parameter(name = "id.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notEquals", required = false) UUID idNotEquals,
        @Parameter(name = "id.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,
        @Parameter(name = "id.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.in", required = false) List<UUID> idIn,
        @Parameter(name = "id.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notIn", required = false) List<UUID> idNotIn,
        @Parameter(name = "departureTime.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeGreaterThan,
        @Parameter(name = "departureTime.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeLessThan,
        @Parameter(name = "departureTime.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeGreaterThanOrEqual,
        @Parameter(name = "departureTime.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeLessThanOrEqual,
        @Parameter(name = "departureTime.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeEquals,
        @Parameter(name = "departureTime.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime departureTimeNotEquals,
        @Parameter(name = "departureTime.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.specified", required = false) Boolean departureTimeSpecified,
        @Parameter(name = "departureTime.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.in", required = false) List<OffsetDateTime> departureTimeIn,
        @Parameter(name = "departureTime.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "departureTime.notIn", required = false) List<OffsetDateTime> departureTimeNotIn,
        @Parameter(name = "arrivalTime.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeGreaterThan,
        @Parameter(name = "arrivalTime.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeLessThan,
        @Parameter(name = "arrivalTime.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeGreaterThanOrEqual,
        @Parameter(name = "arrivalTime.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeLessThanOrEqual,
        @Parameter(name = "arrivalTime.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeEquals,
        @Parameter(name = "arrivalTime.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime arrivalTimeNotEquals,
        @Parameter(name = "arrivalTime.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.specified", required = false) Boolean arrivalTimeSpecified,
        @Parameter(name = "arrivalTime.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.in", required = false) List<OffsetDateTime> arrivalTimeIn,
        @Parameter(name = "arrivalTime.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrivalTime.notIn", required = false) List<OffsetDateTime> arrivalTimeNotIn,
        @Parameter(name = "totalSeats.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.greaterThan", required = false) Integer totalSeatsGreaterThan,
        @Parameter(name = "totalSeats.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.lessThan", required = false) Integer totalSeatsLessThan,
        @Parameter(name = "totalSeats.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.greaterThanOrEqual", required = false) Integer totalSeatsGreaterThanOrEqual,
        @Parameter(name = "totalSeats.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.lessThanOrEqual", required = false) Integer totalSeatsLessThanOrEqual,
        @Parameter(name = "totalSeats.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.equals", required = false) Integer totalSeatsEquals,
        @Parameter(name = "totalSeats.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.notEquals", required = false) Integer totalSeatsNotEquals,
        @Parameter(name = "totalSeats.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.specified", required = false) Boolean totalSeatsSpecified,
        @Parameter(name = "totalSeats.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.in", required = false) List<Integer> totalSeatsIn,
        @Parameter(name = "totalSeats.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalSeats.notIn", required = false) List<Integer> totalSeatsNotIn,
        @Parameter(name = "availableSeats.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.greaterThan", required = false) Integer availableSeatsGreaterThan,
        @Parameter(name = "availableSeats.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.lessThan", required = false) Integer availableSeatsLessThan,
        @Parameter(name = "availableSeats.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.greaterThanOrEqual", required = false) Integer availableSeatsGreaterThanOrEqual,
        @Parameter(name = "availableSeats.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.lessThanOrEqual", required = false) Integer availableSeatsLessThanOrEqual,
        @Parameter(name = "availableSeats.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.equals", required = false) Integer availableSeatsEquals,
        @Parameter(name = "availableSeats.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.notEquals", required = false) Integer availableSeatsNotEquals,
        @Parameter(name = "availableSeats.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.specified", required = false) Boolean availableSeatsSpecified,
        @Parameter(name = "availableSeats.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.in", required = false) List<Integer> availableSeatsIn,
        @Parameter(name = "availableSeats.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "availableSeats.notIn", required = false) List<Integer> availableSeatsNotIn,
        @Parameter(name = "basePrice.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.greaterThan", required = false) BigDecimal basePriceGreaterThan,
        @Parameter(name = "basePrice.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.lessThan", required = false) BigDecimal basePriceLessThan,
        @Parameter(name = "basePrice.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.greaterThanOrEqual", required = false) BigDecimal basePriceGreaterThanOrEqual,
        @Parameter(name = "basePrice.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.lessThanOrEqual", required = false) BigDecimal basePriceLessThanOrEqual,
        @Parameter(name = "basePrice.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.equals", required = false) BigDecimal basePriceEquals,
        @Parameter(name = "basePrice.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.notEquals", required = false) BigDecimal basePriceNotEquals,
        @Parameter(name = "basePrice.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.specified", required = false) Boolean basePriceSpecified,
        @Parameter(name = "basePrice.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.in", required = false) List<BigDecimal> basePriceIn,
        @Parameter(name = "basePrice.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "basePrice.notIn", required = false) List<BigDecimal> basePriceNotIn,
        @Parameter(name = "isActive.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.equals", required = false) Boolean isActiveEquals,
        @Parameter(name = "isActive.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notEquals", required = false) Boolean isActiveNotEquals,
        @Parameter(name = "isActive.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.specified", required = false) Boolean isActiveSpecified,
        @Parameter(name = "isActive.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.in", required = false) List<Boolean> isActiveIn,
        @Parameter(name = "isActive.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notIn", required = false) List<Boolean> isActiveNotIn,
        @Parameter(name = "createdAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThan,
        @Parameter(name = "createdAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThan,
        @Parameter(name = "createdAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThanOrEqual,
        @Parameter(name = "createdAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThanOrEqual,
        @Parameter(name = "createdAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtEquals,
        @Parameter(name = "createdAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtNotEquals,
        @Parameter(name = "createdAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.specified", required = false) Boolean createdAtSpecified,
        @Parameter(name = "createdAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.in", required = false) List<OffsetDateTime> createdAtIn,
        @Parameter(name = "createdAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notIn", required = false) List<OffsetDateTime> createdAtNotIn,
        @Parameter(name = "updatedAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThan,
        @Parameter(name = "updatedAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThan,
        @Parameter(name = "updatedAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThanOrEqual,
        @Parameter(name = "updatedAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThanOrEqual,
        @Parameter(name = "updatedAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtEquals,
        @Parameter(name = "updatedAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtNotEquals,
        @Parameter(name = "updatedAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.specified", required = false) Boolean updatedAtSpecified,
        @Parameter(name = "updatedAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.in", required = false) List<OffsetDateTime> updatedAtIn,
        @Parameter(name = "updatedAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notIn", required = false) List<OffsetDateTime> updatedAtNotIn,
        @Parameter(name = "routeId.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.equals", required = false) UUID routeIdEquals,
        @Parameter(name = "routeId.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.notEquals", required = false) UUID routeIdNotEquals,
        @Parameter(name = "routeId.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.specified", required = false) Boolean routeIdSpecified,
        @Parameter(name = "routeId.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.in", required = false) List<UUID> routeIdIn,
        @Parameter(name = "routeId.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeId.notIn", required = false) List<UUID> routeIdNotIn,
        @Parameter(name = "distinct", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distinct", required = false) Boolean distinct,
        @Min(0) @Parameter(name = "page", description = "Zero-based page index (0..N)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Parameter(name = "size", description = "The size of the page to be returned", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort
    );


    /**
     * GET /api/schedules/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getSchedule",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ScheduleDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/schedules/{id}",
        produces = { "*/*" }
    )
    
    ResponseEntity<ScheduleDTODto> getSchedule(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * PATCH /api/schedules/{id}
     *
     * @param id  (required)
     * @param scheduleDTODto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "partialUpdateSchedule",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ScheduleDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/schedules/{id}",
        produces = { "*/*" },
        consumes = { "application/json", "application/merge-patch+json" }
    )
    
    ResponseEntity<ScheduleDTODto> partialUpdateSchedule(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "ScheduleDTODto", description = "", required = true) @Valid @RequestBody ScheduleDTODto scheduleDTODto
    );


    /**
     * GET /api/schedules/_search
     *
     * @param query  (required)
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 20)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "searchSchedules",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ScheduleDTODto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/schedules/_search",
        produces = { "*/*" }
    )
    
    ResponseEntity<List<ScheduleDTODto>> searchSchedules(
        @NotNull @Parameter(name = "query", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query,
        @Min(0) @Parameter(name = "page", description = "Zero-based page index (0..N)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Parameter(name = "size", description = "The size of the page to be returned", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort
    );


    /**
     * PUT /api/schedules/{id}
     *
     * @param id  (required)
     * @param scheduleDTODto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateSchedule",
        tags = { "schedule-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ScheduleDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/schedules/{id}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ScheduleDTODto> updateSchedule(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "ScheduleDTODto", description = "", required = true) @Valid @RequestBody ScheduleDTODto scheduleDTODto
    );

}

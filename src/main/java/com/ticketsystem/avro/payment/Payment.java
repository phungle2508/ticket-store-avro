/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ticketsystem.avro.payment;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Payment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8720822352820842789L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payment\",\"namespace\":\"com.ticketsystem.avro.payment\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"bookingId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":18,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"paymentMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentStatus\",\"namespace\":\"com.ticketsystem.avro.enums\",\"symbols\":[\"PENDING\",\"COMPLETED\",\"FAILED\",\"REFUNDED\"]}},{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentGatewayResponse\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Payment> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payment> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Payment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Payment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Payment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Payment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Payment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Payment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Payment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID bookingId;
  private java.util.UUID userId;
  private java.math.BigDecimal amount;
  private java.lang.String currency;
  private java.lang.String paymentMethod;
  private com.ticketsystem.avro.enums.PaymentStatus status;
  private java.lang.String transactionId;
  private java.lang.String paymentGatewayResponse;
  private java.time.Instant createdAt;
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payment() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param bookingId The new value for bookingId
   * @param userId The new value for userId
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param paymentMethod The new value for paymentMethod
   * @param status The new value for status
   * @param transactionId The new value for transactionId
   * @param paymentGatewayResponse The new value for paymentGatewayResponse
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   */
  public Payment(java.util.UUID id, java.util.UUID bookingId, java.util.UUID userId, java.math.BigDecimal amount, java.lang.String currency, java.lang.String paymentMethod, com.ticketsystem.avro.enums.PaymentStatus status, java.lang.String transactionId, java.lang.String paymentGatewayResponse, java.time.Instant createdAt, java.time.Instant updatedAt) {
    this.id = id;
    this.bookingId = bookingId;
    this.userId = userId;
    this.amount = amount;
    this.currency = currency;
    this.paymentMethod = paymentMethod;
    this.status = status;
    this.transactionId = transactionId;
    this.paymentGatewayResponse = paymentGatewayResponse;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.updatedAt = updatedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return bookingId;
    case 2: return userId;
    case 3: return amount;
    case 4: return currency;
    case 5: return paymentMethod;
    case 6: return status;
    case 7: return transactionId;
    case 8: return paymentGatewayResponse;
    case 9: return createdAt;
    case 10: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: bookingId = (java.util.UUID)value$; break;
    case 2: userId = (java.util.UUID)value$; break;
    case 3: amount = (java.math.BigDecimal)value$; break;
    case 4: currency = value$ != null ? value$.toString() : null; break;
    case 5: paymentMethod = value$ != null ? value$.toString() : null; break;
    case 6: status = (com.ticketsystem.avro.enums.PaymentStatus)value$; break;
    case 7: transactionId = value$ != null ? value$.toString() : null; break;
    case 8: paymentGatewayResponse = value$ != null ? value$.toString() : null; break;
    case 9: createdAt = (java.time.Instant)value$; break;
    case 10: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'bookingId' field.
   * @return The value of the 'bookingId' field.
   */
  public java.util.UUID getBookingId() {
    return bookingId;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.util.UUID getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }



  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }



  /**
   * Gets the value of the 'paymentMethod' field.
   * @return The value of the 'paymentMethod' field.
   */
  public java.lang.String getPaymentMethod() {
    return paymentMethod;
  }



  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.ticketsystem.avro.enums.PaymentStatus getStatus() {
    return status;
  }



  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }



  /**
   * Gets the value of the 'paymentGatewayResponse' field.
   * @return The value of the 'paymentGatewayResponse' field.
   */
  public java.lang.String getPaymentGatewayResponse() {
    return paymentGatewayResponse;
  }



  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }



  /**
   * Creates a new Payment RecordBuilder.
   * @return A new Payment RecordBuilder
   */
  public static com.ticketsystem.avro.payment.Payment.Builder newBuilder() {
    return new com.ticketsystem.avro.payment.Payment.Builder();
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payment RecordBuilder
   */
  public static com.ticketsystem.avro.payment.Payment.Builder newBuilder(com.ticketsystem.avro.payment.Payment.Builder other) {
    if (other == null) {
      return new com.ticketsystem.avro.payment.Payment.Builder();
    } else {
      return new com.ticketsystem.avro.payment.Payment.Builder(other);
    }
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Payment instance.
   * @param other The existing instance to copy.
   * @return A new Payment RecordBuilder
   */
  public static com.ticketsystem.avro.payment.Payment.Builder newBuilder(com.ticketsystem.avro.payment.Payment other) {
    if (other == null) {
      return new com.ticketsystem.avro.payment.Payment.Builder();
    } else {
      return new com.ticketsystem.avro.payment.Payment.Builder(other);
    }
  }

  /**
   * RecordBuilder for Payment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payment>
    implements org.apache.avro.data.RecordBuilder<Payment> {

    private java.util.UUID id;
    private java.util.UUID bookingId;
    private java.util.UUID userId;
    private java.math.BigDecimal amount;
    private java.lang.String currency;
    private java.lang.String paymentMethod;
    private com.ticketsystem.avro.enums.PaymentStatus status;
    private java.lang.String transactionId;
    private java.lang.String paymentGatewayResponse;
    private java.time.Instant createdAt;
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ticketsystem.avro.payment.Payment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[1].schema(), other.bookingId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[5].schema(), other.paymentMethod);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[7].schema(), other.transactionId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.paymentGatewayResponse)) {
        this.paymentGatewayResponse = data().deepCopy(fields()[8].schema(), other.paymentGatewayResponse);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[9].schema(), other.createdAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[10].schema(), other.updatedAt);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing Payment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ticketsystem.avro.payment.Payment other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[1].schema(), other.bookingId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[5].schema(), other.paymentMethod);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[7].schema(), other.transactionId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.paymentGatewayResponse)) {
        this.paymentGatewayResponse = data().deepCopy(fields()[8].schema(), other.paymentGatewayResponse);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[9].schema(), other.createdAt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[10].schema(), other.updatedAt);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingId' field.
      * @return The value.
      */
    public java.util.UUID getBookingId() {
      return bookingId;
    }


    /**
      * Sets the value of the 'bookingId' field.
      * @param value The value of 'bookingId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setBookingId(java.util.UUID value) {
      validate(fields()[1], value);
      this.bookingId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingId' field has been set.
      * @return True if the 'bookingId' field has been set, false otherwise.
      */
    public boolean hasBookingId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bookingId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearBookingId() {
      bookingId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.util.UUID getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setUserId(java.util.UUID value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setCurrency(java.lang.String value) {
      validate(fields()[4], value);
      this.currency = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethod' field.
      * @return The value.
      */
    public java.lang.String getPaymentMethod() {
      return paymentMethod;
    }


    /**
      * Sets the value of the 'paymentMethod' field.
      * @param value The value of 'paymentMethod'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setPaymentMethod(java.lang.String value) {
      validate(fields()[5], value);
      this.paymentMethod = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethod' field has been set.
      * @return True if the 'paymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentMethod' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearPaymentMethod() {
      paymentMethod = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.ticketsystem.avro.enums.PaymentStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setStatus(com.ticketsystem.avro.enums.PaymentStatus value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setTransactionId(java.lang.String value) {
      validate(fields()[7], value);
      this.transactionId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentGatewayResponse' field.
      * @return The value.
      */
    public java.lang.String getPaymentGatewayResponse() {
      return paymentGatewayResponse;
    }


    /**
      * Sets the value of the 'paymentGatewayResponse' field.
      * @param value The value of 'paymentGatewayResponse'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setPaymentGatewayResponse(java.lang.String value) {
      validate(fields()[8], value);
      this.paymentGatewayResponse = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentGatewayResponse' field has been set.
      * @return True if the 'paymentGatewayResponse' field has been set, false otherwise.
      */
    public boolean hasPaymentGatewayResponse() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'paymentGatewayResponse' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearPaymentGatewayResponse() {
      paymentGatewayResponse = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[9], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearCreatedAt() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[10], value);
      this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.payment.Payment.Builder clearUpdatedAt() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payment build() {
      try {
        Payment record = new Payment();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.bookingId = fieldSetFlags()[1] ? this.bookingId : (java.util.UUID) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.util.UUID) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.currency = fieldSetFlags()[4] ? this.currency : (java.lang.String) defaultValue(fields()[4]);
        record.paymentMethod = fieldSetFlags()[5] ? this.paymentMethod : (java.lang.String) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (com.ticketsystem.avro.enums.PaymentStatus) defaultValue(fields()[6]);
        record.transactionId = fieldSetFlags()[7] ? this.transactionId : (java.lang.String) defaultValue(fields()[7]);
        record.paymentGatewayResponse = fieldSetFlags()[8] ? this.paymentGatewayResponse : (java.lang.String) defaultValue(fields()[8]);
        record.createdAt = fieldSetFlags()[9] ? this.createdAt : (java.time.Instant) defaultValue(fields()[9]);
        record.updatedAt = fieldSetFlags()[10] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payment>
    READER$ = (org.apache.avro.io.DatumReader<Payment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ticketsystem.msroute.client.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import com.ticketsystem.msroute.client.model.RouteDTODto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "route-resource", description = "the route-resource API")
public interface RouteResourceMsrouteApi {

    /**
     * GET /api/routes/count
     *
     * @param idEquals  (optional)
     * @param idNotEquals  (optional)
     * @param idSpecified  (optional)
     * @param idIn  (optional)
     * @param idNotIn  (optional)
     * @param routeNameContains  (optional)
     * @param routeNameDoesNotContain  (optional)
     * @param routeNameEquals  (optional)
     * @param routeNameNotEquals  (optional)
     * @param routeNameSpecified  (optional)
     * @param routeNameIn  (optional)
     * @param routeNameNotIn  (optional)
     * @param originContains  (optional)
     * @param originDoesNotContain  (optional)
     * @param originEquals  (optional)
     * @param originNotEquals  (optional)
     * @param originSpecified  (optional)
     * @param originIn  (optional)
     * @param originNotIn  (optional)
     * @param destinationContains  (optional)
     * @param destinationDoesNotContain  (optional)
     * @param destinationEquals  (optional)
     * @param destinationNotEquals  (optional)
     * @param destinationSpecified  (optional)
     * @param destinationIn  (optional)
     * @param destinationNotIn  (optional)
     * @param distanceGreaterThan  (optional)
     * @param distanceLessThan  (optional)
     * @param distanceGreaterThanOrEqual  (optional)
     * @param distanceLessThanOrEqual  (optional)
     * @param distanceEquals  (optional)
     * @param distanceNotEquals  (optional)
     * @param distanceSpecified  (optional)
     * @param distanceIn  (optional)
     * @param distanceNotIn  (optional)
     * @param estimatedDurationGreaterThan  (optional)
     * @param estimatedDurationLessThan  (optional)
     * @param estimatedDurationGreaterThanOrEqual  (optional)
     * @param estimatedDurationLessThanOrEqual  (optional)
     * @param estimatedDurationEquals  (optional)
     * @param estimatedDurationNotEquals  (optional)
     * @param estimatedDurationSpecified  (optional)
     * @param estimatedDurationIn  (optional)
     * @param estimatedDurationNotIn  (optional)
     * @param transportTypeEquals  (optional)
     * @param transportTypeNotEquals  (optional)
     * @param transportTypeSpecified  (optional)
     * @param transportTypeIn  (optional)
     * @param transportTypeNotIn  (optional)
     * @param isActiveEquals  (optional)
     * @param isActiveNotEquals  (optional)
     * @param isActiveSpecified  (optional)
     * @param isActiveIn  (optional)
     * @param isActiveNotIn  (optional)
     * @param createdAtGreaterThan  (optional)
     * @param createdAtLessThan  (optional)
     * @param createdAtGreaterThanOrEqual  (optional)
     * @param createdAtLessThanOrEqual  (optional)
     * @param createdAtEquals  (optional)
     * @param createdAtNotEquals  (optional)
     * @param createdAtSpecified  (optional)
     * @param createdAtIn  (optional)
     * @param createdAtNotIn  (optional)
     * @param updatedAtGreaterThan  (optional)
     * @param updatedAtLessThan  (optional)
     * @param updatedAtGreaterThanOrEqual  (optional)
     * @param updatedAtLessThanOrEqual  (optional)
     * @param updatedAtEquals  (optional)
     * @param updatedAtNotEquals  (optional)
     * @param updatedAtSpecified  (optional)
     * @param updatedAtIn  (optional)
     * @param updatedAtNotIn  (optional)
     * @param routeNameIdEquals  (optional)
     * @param routeNameIdNotEquals  (optional)
     * @param routeNameIdSpecified  (optional)
     * @param routeNameIdIn  (optional)
     * @param routeNameIdNotIn  (optional)
     * @param distinct  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "countRoutes",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Long.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/routes/count",
        produces = { "*/*" }
    )
    
    ResponseEntity<Long> countRoutes(
        @Parameter(name = "id.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.equals", required = false) UUID idEquals,
        @Parameter(name = "id.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notEquals", required = false) UUID idNotEquals,
        @Parameter(name = "id.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,
        @Parameter(name = "id.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.in", required = false) List<UUID> idIn,
        @Parameter(name = "id.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notIn", required = false) List<UUID> idNotIn,
        @Parameter(name = "routeName.contains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.contains", required = false) String routeNameContains,
        @Parameter(name = "routeName.doesNotContain", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.doesNotContain", required = false) String routeNameDoesNotContain,
        @Parameter(name = "routeName.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.equals", required = false) String routeNameEquals,
        @Parameter(name = "routeName.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.notEquals", required = false) String routeNameNotEquals,
        @Parameter(name = "routeName.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.specified", required = false) Boolean routeNameSpecified,
        @Parameter(name = "routeName.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.in", required = false) List<String> routeNameIn,
        @Parameter(name = "routeName.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.notIn", required = false) List<String> routeNameNotIn,
        @Parameter(name = "origin.contains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.contains", required = false) String originContains,
        @Parameter(name = "origin.doesNotContain", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.doesNotContain", required = false) String originDoesNotContain,
        @Parameter(name = "origin.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.equals", required = false) String originEquals,
        @Parameter(name = "origin.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.notEquals", required = false) String originNotEquals,
        @Parameter(name = "origin.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.specified", required = false) Boolean originSpecified,
        @Parameter(name = "origin.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.in", required = false) List<String> originIn,
        @Parameter(name = "origin.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.notIn", required = false) List<String> originNotIn,
        @Parameter(name = "destination.contains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.contains", required = false) String destinationContains,
        @Parameter(name = "destination.doesNotContain", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.doesNotContain", required = false) String destinationDoesNotContain,
        @Parameter(name = "destination.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.equals", required = false) String destinationEquals,
        @Parameter(name = "destination.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.notEquals", required = false) String destinationNotEquals,
        @Parameter(name = "destination.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.specified", required = false) Boolean destinationSpecified,
        @Parameter(name = "destination.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.in", required = false) List<String> destinationIn,
        @Parameter(name = "destination.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.notIn", required = false) List<String> destinationNotIn,
        @Parameter(name = "distance.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.greaterThan", required = false) Double distanceGreaterThan,
        @Parameter(name = "distance.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.lessThan", required = false) Double distanceLessThan,
        @Parameter(name = "distance.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.greaterThanOrEqual", required = false) Double distanceGreaterThanOrEqual,
        @Parameter(name = "distance.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.lessThanOrEqual", required = false) Double distanceLessThanOrEqual,
        @Parameter(name = "distance.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.equals", required = false) Double distanceEquals,
        @Parameter(name = "distance.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.notEquals", required = false) Double distanceNotEquals,
        @Parameter(name = "distance.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.specified", required = false) Boolean distanceSpecified,
        @Parameter(name = "distance.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.in", required = false) List<Double> distanceIn,
        @Parameter(name = "distance.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.notIn", required = false) List<Double> distanceNotIn,
        @Parameter(name = "estimatedDuration.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.greaterThan", required = false) Integer estimatedDurationGreaterThan,
        @Parameter(name = "estimatedDuration.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.lessThan", required = false) Integer estimatedDurationLessThan,
        @Parameter(name = "estimatedDuration.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.greaterThanOrEqual", required = false) Integer estimatedDurationGreaterThanOrEqual,
        @Parameter(name = "estimatedDuration.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.lessThanOrEqual", required = false) Integer estimatedDurationLessThanOrEqual,
        @Parameter(name = "estimatedDuration.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.equals", required = false) Integer estimatedDurationEquals,
        @Parameter(name = "estimatedDuration.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.notEquals", required = false) Integer estimatedDurationNotEquals,
        @Parameter(name = "estimatedDuration.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.specified", required = false) Boolean estimatedDurationSpecified,
        @Parameter(name = "estimatedDuration.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.in", required = false) List<Integer> estimatedDurationIn,
        @Parameter(name = "estimatedDuration.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.notIn", required = false) List<Integer> estimatedDurationNotIn,
        @Parameter(name = "transportType.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.equals", required = false) String transportTypeEquals,
        @Parameter(name = "transportType.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.notEquals", required = false) String transportTypeNotEquals,
        @Parameter(name = "transportType.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.specified", required = false) Boolean transportTypeSpecified,
        @Parameter(name = "transportType.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.in", required = false) List<String> transportTypeIn,
        @Parameter(name = "transportType.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.notIn", required = false) List<String> transportTypeNotIn,
        @Parameter(name = "isActive.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.equals", required = false) Boolean isActiveEquals,
        @Parameter(name = "isActive.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notEquals", required = false) Boolean isActiveNotEquals,
        @Parameter(name = "isActive.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.specified", required = false) Boolean isActiveSpecified,
        @Parameter(name = "isActive.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.in", required = false) List<Boolean> isActiveIn,
        @Parameter(name = "isActive.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notIn", required = false) List<Boolean> isActiveNotIn,
        @Parameter(name = "createdAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThan,
        @Parameter(name = "createdAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThan,
        @Parameter(name = "createdAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThanOrEqual,
        @Parameter(name = "createdAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThanOrEqual,
        @Parameter(name = "createdAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtEquals,
        @Parameter(name = "createdAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtNotEquals,
        @Parameter(name = "createdAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.specified", required = false) Boolean createdAtSpecified,
        @Parameter(name = "createdAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.in", required = false) List<OffsetDateTime> createdAtIn,
        @Parameter(name = "createdAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notIn", required = false) List<OffsetDateTime> createdAtNotIn,
        @Parameter(name = "updatedAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThan,
        @Parameter(name = "updatedAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThan,
        @Parameter(name = "updatedAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThanOrEqual,
        @Parameter(name = "updatedAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThanOrEqual,
        @Parameter(name = "updatedAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtEquals,
        @Parameter(name = "updatedAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtNotEquals,
        @Parameter(name = "updatedAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.specified", required = false) Boolean updatedAtSpecified,
        @Parameter(name = "updatedAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.in", required = false) List<OffsetDateTime> updatedAtIn,
        @Parameter(name = "updatedAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notIn", required = false) List<OffsetDateTime> updatedAtNotIn,
        @Parameter(name = "routeNameId.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.equals", required = false) UUID routeNameIdEquals,
        @Parameter(name = "routeNameId.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.notEquals", required = false) UUID routeNameIdNotEquals,
        @Parameter(name = "routeNameId.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.specified", required = false) Boolean routeNameIdSpecified,
        @Parameter(name = "routeNameId.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.in", required = false) List<UUID> routeNameIdIn,
        @Parameter(name = "routeNameId.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.notIn", required = false) List<UUID> routeNameIdNotIn,
        @Parameter(name = "distinct", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distinct", required = false) Boolean distinct
    );


    /**
     * POST /api/routes
     *
     * @param routeDTODto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createRoute",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RouteDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/routes",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RouteDTODto> createRoute(
        @Parameter(name = "RouteDTODto", description = "", required = true) @Valid @RequestBody RouteDTODto routeDTODto
    );


    /**
     * DELETE /api/routes/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteRoute",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/routes/{id}"
    )
    
    ResponseEntity<Void> deleteRoute(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/routes
     *
     * @param idEquals  (optional)
     * @param idNotEquals  (optional)
     * @param idSpecified  (optional)
     * @param idIn  (optional)
     * @param idNotIn  (optional)
     * @param routeNameContains  (optional)
     * @param routeNameDoesNotContain  (optional)
     * @param routeNameEquals  (optional)
     * @param routeNameNotEquals  (optional)
     * @param routeNameSpecified  (optional)
     * @param routeNameIn  (optional)
     * @param routeNameNotIn  (optional)
     * @param originContains  (optional)
     * @param originDoesNotContain  (optional)
     * @param originEquals  (optional)
     * @param originNotEquals  (optional)
     * @param originSpecified  (optional)
     * @param originIn  (optional)
     * @param originNotIn  (optional)
     * @param destinationContains  (optional)
     * @param destinationDoesNotContain  (optional)
     * @param destinationEquals  (optional)
     * @param destinationNotEquals  (optional)
     * @param destinationSpecified  (optional)
     * @param destinationIn  (optional)
     * @param destinationNotIn  (optional)
     * @param distanceGreaterThan  (optional)
     * @param distanceLessThan  (optional)
     * @param distanceGreaterThanOrEqual  (optional)
     * @param distanceLessThanOrEqual  (optional)
     * @param distanceEquals  (optional)
     * @param distanceNotEquals  (optional)
     * @param distanceSpecified  (optional)
     * @param distanceIn  (optional)
     * @param distanceNotIn  (optional)
     * @param estimatedDurationGreaterThan  (optional)
     * @param estimatedDurationLessThan  (optional)
     * @param estimatedDurationGreaterThanOrEqual  (optional)
     * @param estimatedDurationLessThanOrEqual  (optional)
     * @param estimatedDurationEquals  (optional)
     * @param estimatedDurationNotEquals  (optional)
     * @param estimatedDurationSpecified  (optional)
     * @param estimatedDurationIn  (optional)
     * @param estimatedDurationNotIn  (optional)
     * @param transportTypeEquals  (optional)
     * @param transportTypeNotEquals  (optional)
     * @param transportTypeSpecified  (optional)
     * @param transportTypeIn  (optional)
     * @param transportTypeNotIn  (optional)
     * @param isActiveEquals  (optional)
     * @param isActiveNotEquals  (optional)
     * @param isActiveSpecified  (optional)
     * @param isActiveIn  (optional)
     * @param isActiveNotIn  (optional)
     * @param createdAtGreaterThan  (optional)
     * @param createdAtLessThan  (optional)
     * @param createdAtGreaterThanOrEqual  (optional)
     * @param createdAtLessThanOrEqual  (optional)
     * @param createdAtEquals  (optional)
     * @param createdAtNotEquals  (optional)
     * @param createdAtSpecified  (optional)
     * @param createdAtIn  (optional)
     * @param createdAtNotIn  (optional)
     * @param updatedAtGreaterThan  (optional)
     * @param updatedAtLessThan  (optional)
     * @param updatedAtGreaterThanOrEqual  (optional)
     * @param updatedAtLessThanOrEqual  (optional)
     * @param updatedAtEquals  (optional)
     * @param updatedAtNotEquals  (optional)
     * @param updatedAtSpecified  (optional)
     * @param updatedAtIn  (optional)
     * @param updatedAtNotIn  (optional)
     * @param routeNameIdEquals  (optional)
     * @param routeNameIdNotEquals  (optional)
     * @param routeNameIdSpecified  (optional)
     * @param routeNameIdIn  (optional)
     * @param routeNameIdNotIn  (optional)
     * @param distinct  (optional)
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 20)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllRoutes",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = RouteDTODto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/routes",
        produces = { "*/*" }
    )
    
    ResponseEntity<List<RouteDTODto>> getAllRoutes(
        @Parameter(name = "id.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.equals", required = false) UUID idEquals,
        @Parameter(name = "id.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notEquals", required = false) UUID idNotEquals,
        @Parameter(name = "id.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,
        @Parameter(name = "id.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.in", required = false) List<UUID> idIn,
        @Parameter(name = "id.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id.notIn", required = false) List<UUID> idNotIn,
        @Parameter(name = "routeName.contains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.contains", required = false) String routeNameContains,
        @Parameter(name = "routeName.doesNotContain", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.doesNotContain", required = false) String routeNameDoesNotContain,
        @Parameter(name = "routeName.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.equals", required = false) String routeNameEquals,
        @Parameter(name = "routeName.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.notEquals", required = false) String routeNameNotEquals,
        @Parameter(name = "routeName.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.specified", required = false) Boolean routeNameSpecified,
        @Parameter(name = "routeName.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.in", required = false) List<String> routeNameIn,
        @Parameter(name = "routeName.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeName.notIn", required = false) List<String> routeNameNotIn,
        @Parameter(name = "origin.contains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.contains", required = false) String originContains,
        @Parameter(name = "origin.doesNotContain", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.doesNotContain", required = false) String originDoesNotContain,
        @Parameter(name = "origin.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.equals", required = false) String originEquals,
        @Parameter(name = "origin.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.notEquals", required = false) String originNotEquals,
        @Parameter(name = "origin.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.specified", required = false) Boolean originSpecified,
        @Parameter(name = "origin.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.in", required = false) List<String> originIn,
        @Parameter(name = "origin.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "origin.notIn", required = false) List<String> originNotIn,
        @Parameter(name = "destination.contains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.contains", required = false) String destinationContains,
        @Parameter(name = "destination.doesNotContain", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.doesNotContain", required = false) String destinationDoesNotContain,
        @Parameter(name = "destination.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.equals", required = false) String destinationEquals,
        @Parameter(name = "destination.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.notEquals", required = false) String destinationNotEquals,
        @Parameter(name = "destination.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.specified", required = false) Boolean destinationSpecified,
        @Parameter(name = "destination.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.in", required = false) List<String> destinationIn,
        @Parameter(name = "destination.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "destination.notIn", required = false) List<String> destinationNotIn,
        @Parameter(name = "distance.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.greaterThan", required = false) Double distanceGreaterThan,
        @Parameter(name = "distance.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.lessThan", required = false) Double distanceLessThan,
        @Parameter(name = "distance.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.greaterThanOrEqual", required = false) Double distanceGreaterThanOrEqual,
        @Parameter(name = "distance.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.lessThanOrEqual", required = false) Double distanceLessThanOrEqual,
        @Parameter(name = "distance.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.equals", required = false) Double distanceEquals,
        @Parameter(name = "distance.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.notEquals", required = false) Double distanceNotEquals,
        @Parameter(name = "distance.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.specified", required = false) Boolean distanceSpecified,
        @Parameter(name = "distance.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.in", required = false) List<Double> distanceIn,
        @Parameter(name = "distance.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance.notIn", required = false) List<Double> distanceNotIn,
        @Parameter(name = "estimatedDuration.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.greaterThan", required = false) Integer estimatedDurationGreaterThan,
        @Parameter(name = "estimatedDuration.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.lessThan", required = false) Integer estimatedDurationLessThan,
        @Parameter(name = "estimatedDuration.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.greaterThanOrEqual", required = false) Integer estimatedDurationGreaterThanOrEqual,
        @Parameter(name = "estimatedDuration.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.lessThanOrEqual", required = false) Integer estimatedDurationLessThanOrEqual,
        @Parameter(name = "estimatedDuration.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.equals", required = false) Integer estimatedDurationEquals,
        @Parameter(name = "estimatedDuration.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.notEquals", required = false) Integer estimatedDurationNotEquals,
        @Parameter(name = "estimatedDuration.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.specified", required = false) Boolean estimatedDurationSpecified,
        @Parameter(name = "estimatedDuration.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.in", required = false) List<Integer> estimatedDurationIn,
        @Parameter(name = "estimatedDuration.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "estimatedDuration.notIn", required = false) List<Integer> estimatedDurationNotIn,
        @Parameter(name = "transportType.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.equals", required = false) String transportTypeEquals,
        @Parameter(name = "transportType.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.notEquals", required = false) String transportTypeNotEquals,
        @Parameter(name = "transportType.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.specified", required = false) Boolean transportTypeSpecified,
        @Parameter(name = "transportType.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.in", required = false) List<String> transportTypeIn,
        @Parameter(name = "transportType.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transportType.notIn", required = false) List<String> transportTypeNotIn,
        @Parameter(name = "isActive.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.equals", required = false) Boolean isActiveEquals,
        @Parameter(name = "isActive.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notEquals", required = false) Boolean isActiveNotEquals,
        @Parameter(name = "isActive.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.specified", required = false) Boolean isActiveSpecified,
        @Parameter(name = "isActive.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.in", required = false) List<Boolean> isActiveIn,
        @Parameter(name = "isActive.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive.notIn", required = false) List<Boolean> isActiveNotIn,
        @Parameter(name = "createdAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThan,
        @Parameter(name = "createdAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThan,
        @Parameter(name = "createdAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtGreaterThanOrEqual,
        @Parameter(name = "createdAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtLessThanOrEqual,
        @Parameter(name = "createdAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtEquals,
        @Parameter(name = "createdAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime createdAtNotEquals,
        @Parameter(name = "createdAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.specified", required = false) Boolean createdAtSpecified,
        @Parameter(name = "createdAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.in", required = false) List<OffsetDateTime> createdAtIn,
        @Parameter(name = "createdAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdAt.notIn", required = false) List<OffsetDateTime> createdAtNotIn,
        @Parameter(name = "updatedAt.greaterThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThan,
        @Parameter(name = "updatedAt.lessThan", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThan", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThan,
        @Parameter(name = "updatedAt.greaterThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.greaterThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtGreaterThanOrEqual,
        @Parameter(name = "updatedAt.lessThanOrEqual", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.lessThanOrEqual", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtLessThanOrEqual,
        @Parameter(name = "updatedAt.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.equals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtEquals,
        @Parameter(name = "updatedAt.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notEquals", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime updatedAtNotEquals,
        @Parameter(name = "updatedAt.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.specified", required = false) Boolean updatedAtSpecified,
        @Parameter(name = "updatedAt.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.in", required = false) List<OffsetDateTime> updatedAtIn,
        @Parameter(name = "updatedAt.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updatedAt.notIn", required = false) List<OffsetDateTime> updatedAtNotIn,
        @Parameter(name = "routeNameId.equals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.equals", required = false) UUID routeNameIdEquals,
        @Parameter(name = "routeNameId.notEquals", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.notEquals", required = false) UUID routeNameIdNotEquals,
        @Parameter(name = "routeNameId.specified", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.specified", required = false) Boolean routeNameIdSpecified,
        @Parameter(name = "routeNameId.in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.in", required = false) List<UUID> routeNameIdIn,
        @Parameter(name = "routeNameId.notIn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "routeNameId.notIn", required = false) List<UUID> routeNameIdNotIn,
        @Parameter(name = "distinct", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distinct", required = false) Boolean distinct,
        @Min(0) @Parameter(name = "page", description = "Zero-based page index (0..N)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Parameter(name = "size", description = "The size of the page to be returned", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort
    );


    /**
     * GET /api/routes/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRoute",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RouteDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/routes/{id}",
        produces = { "*/*" }
    )
    
    ResponseEntity<RouteDTODto> getRoute(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * PATCH /api/routes/{id}
     *
     * @param id  (required)
     * @param routeDTODto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "partialUpdateRoute",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RouteDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/routes/{id}",
        produces = { "*/*" },
        consumes = { "application/json", "application/merge-patch+json" }
    )
    
    ResponseEntity<RouteDTODto> partialUpdateRoute(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "RouteDTODto", description = "", required = true) @Valid @RequestBody RouteDTODto routeDTODto
    );


    /**
     * GET /api/routes/_search
     *
     * @param query  (required)
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 20)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "searchRoutes",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = RouteDTODto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/routes/_search",
        produces = { "*/*" }
    )
    
    ResponseEntity<List<RouteDTODto>> searchRoutes(
        @NotNull @Parameter(name = "query", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query,
        @Min(0) @Parameter(name = "page", description = "Zero-based page index (0..N)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Parameter(name = "size", description = "The size of the page to be returned", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort
    );


    /**
     * PUT /api/routes/{id}
     *
     * @param id  (required)
     * @param routeDTODto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateRoute",
        tags = { "route-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RouteDTODto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/routes/{id}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RouteDTODto> updateRoute(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "RouteDTODto", description = "", required = true) @Valid @RequestBody RouteDTODto routeDTODto
    );

}

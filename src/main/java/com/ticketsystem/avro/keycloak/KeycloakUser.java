/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ticketsystem.avro.keycloak;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class KeycloakUser extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7022081942205354797L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KeycloakUser\",\"namespace\":\"com.ticketsystem.avro.keycloak\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"realmId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<KeycloakUser> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KeycloakUser> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KeycloakUser> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KeycloakUser> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KeycloakUser> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KeycloakUser to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KeycloakUser from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KeycloakUser instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KeycloakUser fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.lang.String username;
  private java.lang.String email;
  private java.util.UUID realmId;
  private java.util.UUID userId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KeycloakUser() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param username The new value for username
   * @param email The new value for email
   * @param realmId The new value for realmId
   * @param userId The new value for userId
   */
  public KeycloakUser(java.util.UUID id, java.lang.String username, java.lang.String email, java.util.UUID realmId, java.util.UUID userId) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.realmId = realmId;
    this.userId = userId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return username;
    case 2: return email;
    case 3: return realmId;
    case 4: return userId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: username = value$ != null ? value$.toString() : null; break;
    case 2: email = value$ != null ? value$.toString() : null; break;
    case 3: realmId = (java.util.UUID)value$; break;
    case 4: userId = (java.util.UUID)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.String getUsername() {
    return username;
  }



  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }



  /**
   * Gets the value of the 'realmId' field.
   * @return The value of the 'realmId' field.
   */
  public java.util.UUID getRealmId() {
    return realmId;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.util.UUID getUserId() {
    return userId;
  }



  /**
   * Creates a new KeycloakUser RecordBuilder.
   * @return A new KeycloakUser RecordBuilder
   */
  public static com.ticketsystem.avro.keycloak.KeycloakUser.Builder newBuilder() {
    return new com.ticketsystem.avro.keycloak.KeycloakUser.Builder();
  }

  /**
   * Creates a new KeycloakUser RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KeycloakUser RecordBuilder
   */
  public static com.ticketsystem.avro.keycloak.KeycloakUser.Builder newBuilder(com.ticketsystem.avro.keycloak.KeycloakUser.Builder other) {
    if (other == null) {
      return new com.ticketsystem.avro.keycloak.KeycloakUser.Builder();
    } else {
      return new com.ticketsystem.avro.keycloak.KeycloakUser.Builder(other);
    }
  }

  /**
   * Creates a new KeycloakUser RecordBuilder by copying an existing KeycloakUser instance.
   * @param other The existing instance to copy.
   * @return A new KeycloakUser RecordBuilder
   */
  public static com.ticketsystem.avro.keycloak.KeycloakUser.Builder newBuilder(com.ticketsystem.avro.keycloak.KeycloakUser other) {
    if (other == null) {
      return new com.ticketsystem.avro.keycloak.KeycloakUser.Builder();
    } else {
      return new com.ticketsystem.avro.keycloak.KeycloakUser.Builder(other);
    }
  }

  /**
   * RecordBuilder for KeycloakUser instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KeycloakUser>
    implements org.apache.avro.data.RecordBuilder<KeycloakUser> {

    private java.util.UUID id;
    private java.lang.String username;
    private java.lang.String email;
    private java.util.UUID realmId;
    private java.util.UUID userId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ticketsystem.avro.keycloak.KeycloakUser.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.realmId)) {
        this.realmId = data().deepCopy(fields()[3].schema(), other.realmId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.userId)) {
        this.userId = data().deepCopy(fields()[4].schema(), other.userId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing KeycloakUser instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ticketsystem.avro.keycloak.KeycloakUser other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.realmId)) {
        this.realmId = data().deepCopy(fields()[3].schema(), other.realmId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userId)) {
        this.userId = data().deepCopy(fields()[4].schema(), other.userId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder setUsername(java.lang.String value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder setEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'realmId' field.
      * @return The value.
      */
    public java.util.UUID getRealmId() {
      return realmId;
    }


    /**
      * Sets the value of the 'realmId' field.
      * @param value The value of 'realmId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder setRealmId(java.util.UUID value) {
      validate(fields()[3], value);
      this.realmId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'realmId' field has been set.
      * @return True if the 'realmId' field has been set, false otherwise.
      */
    public boolean hasRealmId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'realmId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder clearRealmId() {
      realmId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.util.UUID getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder setUserId(java.util.UUID value) {
      validate(fields()[4], value);
      this.userId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.keycloak.KeycloakUser.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KeycloakUser build() {
      try {
        KeycloakUser record = new KeycloakUser();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.String) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.String) defaultValue(fields()[2]);
        record.realmId = fieldSetFlags()[3] ? this.realmId : (java.util.UUID) defaultValue(fields()[3]);
        record.userId = fieldSetFlags()[4] ? this.userId : (java.util.UUID) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KeycloakUser>
    WRITER$ = (org.apache.avro.io.DatumWriter<KeycloakUser>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KeycloakUser>
    READER$ = (org.apache.avro.io.DatumReader<KeycloakUser>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











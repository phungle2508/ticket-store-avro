/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ticketsystem.avro.booking;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Booking extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3902048497478155982L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Booking\",\"namespace\":\"com.ticketsystem.avro.booking\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"scheduleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"ticketIds\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TextBlob in JDL; serialized list of UUIDs\"},{\"name\":\"totalAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":18,\"scale\":2}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"BookingStatus\",\"namespace\":\"com.ticketsystem.avro.enums\",\"symbols\":[\"PENDING\",\"CONFIRMED\",\"CANCELLED\",\"COMPLETED\"]}},{\"name\":\"passengerDetails\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contactEmail\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contactPhone\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bookingReference\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"expiresAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Booking> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Booking> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Booking> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Booking> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Booking> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Booking to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Booking from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Booking instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Booking fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID userId;
  private java.util.UUID scheduleId;
  /** TextBlob in JDL; serialized list of UUIDs */
  private java.lang.String ticketIds;
  private java.math.BigDecimal totalAmount;
  private com.ticketsystem.avro.enums.BookingStatus status;
  private java.lang.String passengerDetails;
  private java.lang.String contactEmail;
  private java.lang.String contactPhone;
  private java.lang.String bookingReference;
  private java.time.Instant createdAt;
  private java.time.Instant updatedAt;
  private java.time.Instant expiresAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Booking() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param userId The new value for userId
   * @param scheduleId The new value for scheduleId
   * @param ticketIds TextBlob in JDL; serialized list of UUIDs
   * @param totalAmount The new value for totalAmount
   * @param status The new value for status
   * @param passengerDetails The new value for passengerDetails
   * @param contactEmail The new value for contactEmail
   * @param contactPhone The new value for contactPhone
   * @param bookingReference The new value for bookingReference
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   * @param expiresAt The new value for expiresAt
   */
  public Booking(java.util.UUID id, java.util.UUID userId, java.util.UUID scheduleId, java.lang.String ticketIds, java.math.BigDecimal totalAmount, com.ticketsystem.avro.enums.BookingStatus status, java.lang.String passengerDetails, java.lang.String contactEmail, java.lang.String contactPhone, java.lang.String bookingReference, java.time.Instant createdAt, java.time.Instant updatedAt, java.time.Instant expiresAt) {
    this.id = id;
    this.userId = userId;
    this.scheduleId = scheduleId;
    this.ticketIds = ticketIds;
    this.totalAmount = totalAmount;
    this.status = status;
    this.passengerDetails = passengerDetails;
    this.contactEmail = contactEmail;
    this.contactPhone = contactPhone;
    this.bookingReference = bookingReference;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.updatedAt = updatedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.expiresAt = expiresAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userId;
    case 2: return scheduleId;
    case 3: return ticketIds;
    case 4: return totalAmount;
    case 5: return status;
    case 6: return passengerDetails;
    case 7: return contactEmail;
    case 8: return contactPhone;
    case 9: return bookingReference;
    case 10: return createdAt;
    case 11: return updatedAt;
    case 12: return expiresAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: userId = (java.util.UUID)value$; break;
    case 2: scheduleId = (java.util.UUID)value$; break;
    case 3: ticketIds = value$ != null ? value$.toString() : null; break;
    case 4: totalAmount = (java.math.BigDecimal)value$; break;
    case 5: status = (com.ticketsystem.avro.enums.BookingStatus)value$; break;
    case 6: passengerDetails = value$ != null ? value$.toString() : null; break;
    case 7: contactEmail = value$ != null ? value$.toString() : null; break;
    case 8: contactPhone = value$ != null ? value$.toString() : null; break;
    case 9: bookingReference = value$ != null ? value$.toString() : null; break;
    case 10: createdAt = (java.time.Instant)value$; break;
    case 11: updatedAt = (java.time.Instant)value$; break;
    case 12: expiresAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.util.UUID getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'scheduleId' field.
   * @return The value of the 'scheduleId' field.
   */
  public java.util.UUID getScheduleId() {
    return scheduleId;
  }



  /**
   * Gets the value of the 'ticketIds' field.
   * @return TextBlob in JDL; serialized list of UUIDs
   */
  public java.lang.String getTicketIds() {
    return ticketIds;
  }



  /**
   * Gets the value of the 'totalAmount' field.
   * @return The value of the 'totalAmount' field.
   */
  public java.math.BigDecimal getTotalAmount() {
    return totalAmount;
  }



  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.ticketsystem.avro.enums.BookingStatus getStatus() {
    return status;
  }



  /**
   * Gets the value of the 'passengerDetails' field.
   * @return The value of the 'passengerDetails' field.
   */
  public java.lang.String getPassengerDetails() {
    return passengerDetails;
  }



  /**
   * Gets the value of the 'contactEmail' field.
   * @return The value of the 'contactEmail' field.
   */
  public java.lang.String getContactEmail() {
    return contactEmail;
  }



  /**
   * Gets the value of the 'contactPhone' field.
   * @return The value of the 'contactPhone' field.
   */
  public java.lang.String getContactPhone() {
    return contactPhone;
  }



  /**
   * Gets the value of the 'bookingReference' field.
   * @return The value of the 'bookingReference' field.
   */
  public java.lang.String getBookingReference() {
    return bookingReference;
  }



  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }



  /**
   * Gets the value of the 'expiresAt' field.
   * @return The value of the 'expiresAt' field.
   */
  public java.time.Instant getExpiresAt() {
    return expiresAt;
  }



  /**
   * Creates a new Booking RecordBuilder.
   * @return A new Booking RecordBuilder
   */
  public static com.ticketsystem.avro.booking.Booking.Builder newBuilder() {
    return new com.ticketsystem.avro.booking.Booking.Builder();
  }

  /**
   * Creates a new Booking RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Booking RecordBuilder
   */
  public static com.ticketsystem.avro.booking.Booking.Builder newBuilder(com.ticketsystem.avro.booking.Booking.Builder other) {
    if (other == null) {
      return new com.ticketsystem.avro.booking.Booking.Builder();
    } else {
      return new com.ticketsystem.avro.booking.Booking.Builder(other);
    }
  }

  /**
   * Creates a new Booking RecordBuilder by copying an existing Booking instance.
   * @param other The existing instance to copy.
   * @return A new Booking RecordBuilder
   */
  public static com.ticketsystem.avro.booking.Booking.Builder newBuilder(com.ticketsystem.avro.booking.Booking other) {
    if (other == null) {
      return new com.ticketsystem.avro.booking.Booking.Builder();
    } else {
      return new com.ticketsystem.avro.booking.Booking.Builder(other);
    }
  }

  /**
   * RecordBuilder for Booking instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Booking>
    implements org.apache.avro.data.RecordBuilder<Booking> {

    private java.util.UUID id;
    private java.util.UUID userId;
    private java.util.UUID scheduleId;
    /** TextBlob in JDL; serialized list of UUIDs */
    private java.lang.String ticketIds;
    private java.math.BigDecimal totalAmount;
    private com.ticketsystem.avro.enums.BookingStatus status;
    private java.lang.String passengerDetails;
    private java.lang.String contactEmail;
    private java.lang.String contactPhone;
    private java.lang.String bookingReference;
    private java.time.Instant createdAt;
    private java.time.Instant updatedAt;
    private java.time.Instant expiresAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ticketsystem.avro.booking.Booking.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.scheduleId)) {
        this.scheduleId = data().deepCopy(fields()[2].schema(), other.scheduleId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ticketIds)) {
        this.ticketIds = data().deepCopy(fields()[3].schema(), other.ticketIds);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[4].schema(), other.totalAmount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.passengerDetails)) {
        this.passengerDetails = data().deepCopy(fields()[6].schema(), other.passengerDetails);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.contactEmail)) {
        this.contactEmail = data().deepCopy(fields()[7].schema(), other.contactEmail);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.contactPhone)) {
        this.contactPhone = data().deepCopy(fields()[8].schema(), other.contactPhone);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.bookingReference)) {
        this.bookingReference = data().deepCopy(fields()[9].schema(), other.bookingReference);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[10].schema(), other.createdAt);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[11].schema(), other.updatedAt);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.expiresAt)) {
        this.expiresAt = data().deepCopy(fields()[12].schema(), other.expiresAt);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing Booking instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ticketsystem.avro.booking.Booking other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.scheduleId)) {
        this.scheduleId = data().deepCopy(fields()[2].schema(), other.scheduleId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ticketIds)) {
        this.ticketIds = data().deepCopy(fields()[3].schema(), other.ticketIds);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[4].schema(), other.totalAmount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.passengerDetails)) {
        this.passengerDetails = data().deepCopy(fields()[6].schema(), other.passengerDetails);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.contactEmail)) {
        this.contactEmail = data().deepCopy(fields()[7].schema(), other.contactEmail);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.contactPhone)) {
        this.contactPhone = data().deepCopy(fields()[8].schema(), other.contactPhone);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bookingReference)) {
        this.bookingReference = data().deepCopy(fields()[9].schema(), other.bookingReference);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[10].schema(), other.createdAt);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[11].schema(), other.updatedAt);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.expiresAt)) {
        this.expiresAt = data().deepCopy(fields()[12].schema(), other.expiresAt);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.util.UUID getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setUserId(java.util.UUID value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduleId' field.
      * @return The value.
      */
    public java.util.UUID getScheduleId() {
      return scheduleId;
    }


    /**
      * Sets the value of the 'scheduleId' field.
      * @param value The value of 'scheduleId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setScheduleId(java.util.UUID value) {
      validate(fields()[2], value);
      this.scheduleId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleId' field has been set.
      * @return True if the 'scheduleId' field has been set, false otherwise.
      */
    public boolean hasScheduleId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'scheduleId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearScheduleId() {
      scheduleId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ticketIds' field.
      * TextBlob in JDL; serialized list of UUIDs
      * @return The value.
      */
    public java.lang.String getTicketIds() {
      return ticketIds;
    }


    /**
      * Sets the value of the 'ticketIds' field.
      * TextBlob in JDL; serialized list of UUIDs
      * @param value The value of 'ticketIds'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setTicketIds(java.lang.String value) {
      validate(fields()[3], value);
      this.ticketIds = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ticketIds' field has been set.
      * TextBlob in JDL; serialized list of UUIDs
      * @return True if the 'ticketIds' field has been set, false otherwise.
      */
    public boolean hasTicketIds() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ticketIds' field.
      * TextBlob in JDL; serialized list of UUIDs
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearTicketIds() {
      ticketIds = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalAmount() {
      return totalAmount;
    }


    /**
      * Sets the value of the 'totalAmount' field.
      * @param value The value of 'totalAmount'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setTotalAmount(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.totalAmount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAmount' field has been set.
      * @return True if the 'totalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalAmount' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearTotalAmount() {
      totalAmount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.ticketsystem.avro.enums.BookingStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setStatus(com.ticketsystem.avro.enums.BookingStatus value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'passengerDetails' field.
      * @return The value.
      */
    public java.lang.String getPassengerDetails() {
      return passengerDetails;
    }


    /**
      * Sets the value of the 'passengerDetails' field.
      * @param value The value of 'passengerDetails'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setPassengerDetails(java.lang.String value) {
      validate(fields()[6], value);
      this.passengerDetails = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'passengerDetails' field has been set.
      * @return True if the 'passengerDetails' field has been set, false otherwise.
      */
    public boolean hasPassengerDetails() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'passengerDetails' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearPassengerDetails() {
      passengerDetails = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'contactEmail' field.
      * @return The value.
      */
    public java.lang.String getContactEmail() {
      return contactEmail;
    }


    /**
      * Sets the value of the 'contactEmail' field.
      * @param value The value of 'contactEmail'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setContactEmail(java.lang.String value) {
      validate(fields()[7], value);
      this.contactEmail = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'contactEmail' field has been set.
      * @return True if the 'contactEmail' field has been set, false otherwise.
      */
    public boolean hasContactEmail() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'contactEmail' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearContactEmail() {
      contactEmail = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'contactPhone' field.
      * @return The value.
      */
    public java.lang.String getContactPhone() {
      return contactPhone;
    }


    /**
      * Sets the value of the 'contactPhone' field.
      * @param value The value of 'contactPhone'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setContactPhone(java.lang.String value) {
      validate(fields()[8], value);
      this.contactPhone = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'contactPhone' field has been set.
      * @return True if the 'contactPhone' field has been set, false otherwise.
      */
    public boolean hasContactPhone() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'contactPhone' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearContactPhone() {
      contactPhone = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingReference' field.
      * @return The value.
      */
    public java.lang.String getBookingReference() {
      return bookingReference;
    }


    /**
      * Sets the value of the 'bookingReference' field.
      * @param value The value of 'bookingReference'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setBookingReference(java.lang.String value) {
      validate(fields()[9], value);
      this.bookingReference = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingReference' field has been set.
      * @return True if the 'bookingReference' field has been set, false otherwise.
      */
    public boolean hasBookingReference() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bookingReference' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearBookingReference() {
      bookingReference = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[10], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearCreatedAt() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[11], value);
      this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearUpdatedAt() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'expiresAt' field.
      * @return The value.
      */
    public java.time.Instant getExpiresAt() {
      return expiresAt;
    }


    /**
      * Sets the value of the 'expiresAt' field.
      * @param value The value of 'expiresAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder setExpiresAt(java.time.Instant value) {
      validate(fields()[12], value);
      this.expiresAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'expiresAt' field has been set.
      * @return True if the 'expiresAt' field has been set, false otherwise.
      */
    public boolean hasExpiresAt() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'expiresAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Booking.Builder clearExpiresAt() {
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Booking build() {
      try {
        Booking record = new Booking();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.util.UUID) defaultValue(fields()[1]);
        record.scheduleId = fieldSetFlags()[2] ? this.scheduleId : (java.util.UUID) defaultValue(fields()[2]);
        record.ticketIds = fieldSetFlags()[3] ? this.ticketIds : (java.lang.String) defaultValue(fields()[3]);
        record.totalAmount = fieldSetFlags()[4] ? this.totalAmount : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (com.ticketsystem.avro.enums.BookingStatus) defaultValue(fields()[5]);
        record.passengerDetails = fieldSetFlags()[6] ? this.passengerDetails : (java.lang.String) defaultValue(fields()[6]);
        record.contactEmail = fieldSetFlags()[7] ? this.contactEmail : (java.lang.String) defaultValue(fields()[7]);
        record.contactPhone = fieldSetFlags()[8] ? this.contactPhone : (java.lang.String) defaultValue(fields()[8]);
        record.bookingReference = fieldSetFlags()[9] ? this.bookingReference : (java.lang.String) defaultValue(fields()[9]);
        record.createdAt = fieldSetFlags()[10] ? this.createdAt : (java.time.Instant) defaultValue(fields()[10]);
        record.updatedAt = fieldSetFlags()[11] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[11]);
        record.expiresAt = fieldSetFlags()[12] ? this.expiresAt : (java.time.Instant) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Booking>
    WRITER$ = (org.apache.avro.io.DatumWriter<Booking>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Booking>
    READER$ = (org.apache.avro.io.DatumReader<Booking>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











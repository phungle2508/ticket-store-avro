/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ticketsystem.avro.notification;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Notification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8579897896989950814L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Notification\",\"namespace\":\"com.ticketsystem.avro.notification\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"recipientId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isRead\",\"type\":\"boolean\"},{\"name\":\"relatedEntityType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"relatedEntityId\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"uuid\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"scheduledAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Notification> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Notification> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Notification> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Notification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Notification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Notification to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Notification from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Notification instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Notification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID recipientId;
  private java.lang.String type;
  private java.lang.String title;
  private java.lang.String message;
  private boolean isRead;
  private java.lang.String relatedEntityType;
  private java.util.UUID relatedEntityId;
  private java.time.Instant createdAt;
  private java.time.Instant scheduledAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Notification() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param recipientId The new value for recipientId
   * @param type The new value for type
   * @param title The new value for title
   * @param message The new value for message
   * @param isRead The new value for isRead
   * @param relatedEntityType The new value for relatedEntityType
   * @param relatedEntityId The new value for relatedEntityId
   * @param createdAt The new value for createdAt
   * @param scheduledAt The new value for scheduledAt
   */
  public Notification(java.util.UUID id, java.util.UUID recipientId, java.lang.String type, java.lang.String title, java.lang.String message, java.lang.Boolean isRead, java.lang.String relatedEntityType, java.util.UUID relatedEntityId, java.time.Instant createdAt, java.time.Instant scheduledAt) {
    this.id = id;
    this.recipientId = recipientId;
    this.type = type;
    this.title = title;
    this.message = message;
    this.isRead = isRead;
    this.relatedEntityType = relatedEntityType;
    this.relatedEntityId = relatedEntityId;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.scheduledAt = scheduledAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return recipientId;
    case 2: return type;
    case 3: return title;
    case 4: return message;
    case 5: return isRead;
    case 6: return relatedEntityType;
    case 7: return relatedEntityId;
    case 8: return createdAt;
    case 9: return scheduledAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: recipientId = (java.util.UUID)value$; break;
    case 2: type = value$ != null ? value$.toString() : null; break;
    case 3: title = value$ != null ? value$.toString() : null; break;
    case 4: message = value$ != null ? value$.toString() : null; break;
    case 5: isRead = (java.lang.Boolean)value$; break;
    case 6: relatedEntityType = value$ != null ? value$.toString() : null; break;
    case 7: relatedEntityId = (java.util.UUID)value$; break;
    case 8: createdAt = (java.time.Instant)value$; break;
    case 9: scheduledAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'recipientId' field.
   * @return The value of the 'recipientId' field.
   */
  public java.util.UUID getRecipientId() {
    return recipientId;
  }



  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }



  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }



  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }



  /**
   * Gets the value of the 'isRead' field.
   * @return The value of the 'isRead' field.
   */
  public boolean getIsRead() {
    return isRead;
  }



  /**
   * Gets the value of the 'relatedEntityType' field.
   * @return The value of the 'relatedEntityType' field.
   */
  public java.lang.String getRelatedEntityType() {
    return relatedEntityType;
  }



  /**
   * Gets the value of the 'relatedEntityId' field.
   * @return The value of the 'relatedEntityId' field.
   */
  public java.util.UUID getRelatedEntityId() {
    return relatedEntityId;
  }



  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the value of the 'scheduledAt' field.
   * @return The value of the 'scheduledAt' field.
   */
  public java.time.Instant getScheduledAt() {
    return scheduledAt;
  }



  /**
   * Creates a new Notification RecordBuilder.
   * @return A new Notification RecordBuilder
   */
  public static com.ticketsystem.avro.notification.Notification.Builder newBuilder() {
    return new com.ticketsystem.avro.notification.Notification.Builder();
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Notification RecordBuilder
   */
  public static com.ticketsystem.avro.notification.Notification.Builder newBuilder(com.ticketsystem.avro.notification.Notification.Builder other) {
    if (other == null) {
      return new com.ticketsystem.avro.notification.Notification.Builder();
    } else {
      return new com.ticketsystem.avro.notification.Notification.Builder(other);
    }
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Notification instance.
   * @param other The existing instance to copy.
   * @return A new Notification RecordBuilder
   */
  public static com.ticketsystem.avro.notification.Notification.Builder newBuilder(com.ticketsystem.avro.notification.Notification other) {
    if (other == null) {
      return new com.ticketsystem.avro.notification.Notification.Builder();
    } else {
      return new com.ticketsystem.avro.notification.Notification.Builder(other);
    }
  }

  /**
   * RecordBuilder for Notification instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Notification>
    implements org.apache.avro.data.RecordBuilder<Notification> {

    private java.util.UUID id;
    private java.util.UUID recipientId;
    private java.lang.String type;
    private java.lang.String title;
    private java.lang.String message;
    private boolean isRead;
    private java.lang.String relatedEntityType;
    private java.util.UUID relatedEntityId;
    private java.time.Instant createdAt;
    private java.time.Instant scheduledAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ticketsystem.avro.notification.Notification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.recipientId)) {
        this.recipientId = data().deepCopy(fields()[1].schema(), other.recipientId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.title)) {
        this.title = data().deepCopy(fields()[3].schema(), other.title);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isRead)) {
        this.isRead = data().deepCopy(fields()[5].schema(), other.isRead);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.relatedEntityType)) {
        this.relatedEntityType = data().deepCopy(fields()[6].schema(), other.relatedEntityType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.relatedEntityId)) {
        this.relatedEntityId = data().deepCopy(fields()[7].schema(), other.relatedEntityId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.scheduledAt)) {
        this.scheduledAt = data().deepCopy(fields()[9].schema(), other.scheduledAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Notification instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ticketsystem.avro.notification.Notification other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.recipientId)) {
        this.recipientId = data().deepCopy(fields()[1].schema(), other.recipientId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.title)) {
        this.title = data().deepCopy(fields()[3].schema(), other.title);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isRead)) {
        this.isRead = data().deepCopy(fields()[5].schema(), other.isRead);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.relatedEntityType)) {
        this.relatedEntityType = data().deepCopy(fields()[6].schema(), other.relatedEntityType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.relatedEntityId)) {
        this.relatedEntityId = data().deepCopy(fields()[7].schema(), other.relatedEntityId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.scheduledAt)) {
        this.scheduledAt = data().deepCopy(fields()[9].schema(), other.scheduledAt);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipientId' field.
      * @return The value.
      */
    public java.util.UUID getRecipientId() {
      return recipientId;
    }


    /**
      * Sets the value of the 'recipientId' field.
      * @param value The value of 'recipientId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setRecipientId(java.util.UUID value) {
      validate(fields()[1], value);
      this.recipientId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'recipientId' field has been set.
      * @return True if the 'recipientId' field has been set, false otherwise.
      */
    public boolean hasRecipientId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'recipientId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearRecipientId() {
      recipientId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setType(java.lang.String value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setTitle(java.lang.String value) {
      validate(fields()[3], value);
      this.title = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearTitle() {
      title = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setMessage(java.lang.String value) {
      validate(fields()[4], value);
      this.message = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearMessage() {
      message = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRead' field.
      * @return The value.
      */
    public boolean getIsRead() {
      return isRead;
    }


    /**
      * Sets the value of the 'isRead' field.
      * @param value The value of 'isRead'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setIsRead(boolean value) {
      validate(fields()[5], value);
      this.isRead = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isRead' field has been set.
      * @return True if the 'isRead' field has been set, false otherwise.
      */
    public boolean hasIsRead() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isRead' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearIsRead() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'relatedEntityType' field.
      * @return The value.
      */
    public java.lang.String getRelatedEntityType() {
      return relatedEntityType;
    }


    /**
      * Sets the value of the 'relatedEntityType' field.
      * @param value The value of 'relatedEntityType'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setRelatedEntityType(java.lang.String value) {
      validate(fields()[6], value);
      this.relatedEntityType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'relatedEntityType' field has been set.
      * @return True if the 'relatedEntityType' field has been set, false otherwise.
      */
    public boolean hasRelatedEntityType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'relatedEntityType' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearRelatedEntityType() {
      relatedEntityType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'relatedEntityId' field.
      * @return The value.
      */
    public java.util.UUID getRelatedEntityId() {
      return relatedEntityId;
    }


    /**
      * Sets the value of the 'relatedEntityId' field.
      * @param value The value of 'relatedEntityId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setRelatedEntityId(java.util.UUID value) {
      validate(fields()[7], value);
      this.relatedEntityId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'relatedEntityId' field has been set.
      * @return True if the 'relatedEntityId' field has been set, false otherwise.
      */
    public boolean hasRelatedEntityId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'relatedEntityId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearRelatedEntityId() {
      relatedEntityId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearCreatedAt() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduledAt' field.
      * @return The value.
      */
    public java.time.Instant getScheduledAt() {
      return scheduledAt;
    }


    /**
      * Sets the value of the 'scheduledAt' field.
      * @param value The value of 'scheduledAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder setScheduledAt(java.time.Instant value) {
      validate(fields()[9], value);
      this.scheduledAt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduledAt' field has been set.
      * @return True if the 'scheduledAt' field has been set, false otherwise.
      */
    public boolean hasScheduledAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'scheduledAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.notification.Notification.Builder clearScheduledAt() {
      scheduledAt = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Notification build() {
      try {
        Notification record = new Notification();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.recipientId = fieldSetFlags()[1] ? this.recipientId : (java.util.UUID) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.String) defaultValue(fields()[2]);
        record.title = fieldSetFlags()[3] ? this.title : (java.lang.String) defaultValue(fields()[3]);
        record.message = fieldSetFlags()[4] ? this.message : (java.lang.String) defaultValue(fields()[4]);
        record.isRead = fieldSetFlags()[5] ? this.isRead : (java.lang.Boolean) defaultValue(fields()[5]);
        record.relatedEntityType = fieldSetFlags()[6] ? this.relatedEntityType : (java.lang.String) defaultValue(fields()[6]);
        record.relatedEntityId = fieldSetFlags()[7] ? this.relatedEntityId : (java.util.UUID) defaultValue(fields()[7]);
        record.createdAt = fieldSetFlags()[8] ? this.createdAt : (java.time.Instant) defaultValue(fields()[8]);
        record.scheduledAt = fieldSetFlags()[9] ? this.scheduledAt : (java.time.Instant) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Notification>
    WRITER$ = (org.apache.avro.io.DatumWriter<Notification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Notification>
    READER$ = (org.apache.avro.io.DatumReader<Notification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ticketsystem.avro.booking;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Ticket extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3188952343868689347L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Ticket\",\"namespace\":\"com.ticketsystem.avro.booking\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"scheduleId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"seatNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"seatType\",\"type\":{\"type\":\"enum\",\"name\":\"SeatType\",\"namespace\":\"com.ticketsystem.avro.enums\",\"symbols\":[\"ECONOMY\",\"BUSINESS\",\"FIRST_CLASS\",\"VIP\"]}},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":18,\"scale\":2}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"TicketStatus\",\"namespace\":\"com.ticketsystem.avro.enums\",\"symbols\":[\"AVAILABLE\",\"BOOKED\",\"CANCELLED\",\"EXPIRED\"]}},{\"name\":\"reservedUntil\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Ticket> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Ticket> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Ticket> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Ticket> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Ticket> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Ticket to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Ticket from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Ticket instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Ticket fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID scheduleId;
  private java.lang.String seatNumber;
  private com.ticketsystem.avro.enums.SeatType seatType;
  private java.math.BigDecimal price;
  private com.ticketsystem.avro.enums.TicketStatus status;
  private java.time.Instant reservedUntil;
  private java.time.Instant createdAt;
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Ticket() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param scheduleId The new value for scheduleId
   * @param seatNumber The new value for seatNumber
   * @param seatType The new value for seatType
   * @param price The new value for price
   * @param status The new value for status
   * @param reservedUntil The new value for reservedUntil
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   */
  public Ticket(java.util.UUID id, java.util.UUID scheduleId, java.lang.String seatNumber, com.ticketsystem.avro.enums.SeatType seatType, java.math.BigDecimal price, com.ticketsystem.avro.enums.TicketStatus status, java.time.Instant reservedUntil, java.time.Instant createdAt, java.time.Instant updatedAt) {
    this.id = id;
    this.scheduleId = scheduleId;
    this.seatNumber = seatNumber;
    this.seatType = seatType;
    this.price = price;
    this.status = status;
    this.reservedUntil = reservedUntil;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.updatedAt = updatedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return scheduleId;
    case 2: return seatNumber;
    case 3: return seatType;
    case 4: return price;
    case 5: return status;
    case 6: return reservedUntil;
    case 7: return createdAt;
    case 8: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: scheduleId = (java.util.UUID)value$; break;
    case 2: seatNumber = value$ != null ? value$.toString() : null; break;
    case 3: seatType = (com.ticketsystem.avro.enums.SeatType)value$; break;
    case 4: price = (java.math.BigDecimal)value$; break;
    case 5: status = (com.ticketsystem.avro.enums.TicketStatus)value$; break;
    case 6: reservedUntil = (java.time.Instant)value$; break;
    case 7: createdAt = (java.time.Instant)value$; break;
    case 8: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'scheduleId' field.
   * @return The value of the 'scheduleId' field.
   */
  public java.util.UUID getScheduleId() {
    return scheduleId;
  }



  /**
   * Gets the value of the 'seatNumber' field.
   * @return The value of the 'seatNumber' field.
   */
  public java.lang.String getSeatNumber() {
    return seatNumber;
  }



  /**
   * Gets the value of the 'seatType' field.
   * @return The value of the 'seatType' field.
   */
  public com.ticketsystem.avro.enums.SeatType getSeatType() {
    return seatType;
  }



  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.math.BigDecimal getPrice() {
    return price;
  }



  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.ticketsystem.avro.enums.TicketStatus getStatus() {
    return status;
  }



  /**
   * Gets the value of the 'reservedUntil' field.
   * @return The value of the 'reservedUntil' field.
   */
  public java.time.Instant getReservedUntil() {
    return reservedUntil;
  }



  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }



  /**
   * Creates a new Ticket RecordBuilder.
   * @return A new Ticket RecordBuilder
   */
  public static com.ticketsystem.avro.booking.Ticket.Builder newBuilder() {
    return new com.ticketsystem.avro.booking.Ticket.Builder();
  }

  /**
   * Creates a new Ticket RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Ticket RecordBuilder
   */
  public static com.ticketsystem.avro.booking.Ticket.Builder newBuilder(com.ticketsystem.avro.booking.Ticket.Builder other) {
    if (other == null) {
      return new com.ticketsystem.avro.booking.Ticket.Builder();
    } else {
      return new com.ticketsystem.avro.booking.Ticket.Builder(other);
    }
  }

  /**
   * Creates a new Ticket RecordBuilder by copying an existing Ticket instance.
   * @param other The existing instance to copy.
   * @return A new Ticket RecordBuilder
   */
  public static com.ticketsystem.avro.booking.Ticket.Builder newBuilder(com.ticketsystem.avro.booking.Ticket other) {
    if (other == null) {
      return new com.ticketsystem.avro.booking.Ticket.Builder();
    } else {
      return new com.ticketsystem.avro.booking.Ticket.Builder(other);
    }
  }

  /**
   * RecordBuilder for Ticket instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Ticket>
    implements org.apache.avro.data.RecordBuilder<Ticket> {

    private java.util.UUID id;
    private java.util.UUID scheduleId;
    private java.lang.String seatNumber;
    private com.ticketsystem.avro.enums.SeatType seatType;
    private java.math.BigDecimal price;
    private com.ticketsystem.avro.enums.TicketStatus status;
    private java.time.Instant reservedUntil;
    private java.time.Instant createdAt;
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ticketsystem.avro.booking.Ticket.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.scheduleId)) {
        this.scheduleId = data().deepCopy(fields()[1].schema(), other.scheduleId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.seatNumber)) {
        this.seatNumber = data().deepCopy(fields()[2].schema(), other.seatNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.seatType)) {
        this.seatType = data().deepCopy(fields()[3].schema(), other.seatType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.reservedUntil)) {
        this.reservedUntil = data().deepCopy(fields()[6].schema(), other.reservedUntil);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[7].schema(), other.createdAt);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[8].schema(), other.updatedAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Ticket instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ticketsystem.avro.booking.Ticket other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scheduleId)) {
        this.scheduleId = data().deepCopy(fields()[1].schema(), other.scheduleId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.seatNumber)) {
        this.seatNumber = data().deepCopy(fields()[2].schema(), other.seatNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.seatType)) {
        this.seatType = data().deepCopy(fields()[3].schema(), other.seatType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.reservedUntil)) {
        this.reservedUntil = data().deepCopy(fields()[6].schema(), other.reservedUntil);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[7].schema(), other.createdAt);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[8].schema(), other.updatedAt);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduleId' field.
      * @return The value.
      */
    public java.util.UUID getScheduleId() {
      return scheduleId;
    }


    /**
      * Sets the value of the 'scheduleId' field.
      * @param value The value of 'scheduleId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setScheduleId(java.util.UUID value) {
      validate(fields()[1], value);
      this.scheduleId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleId' field has been set.
      * @return True if the 'scheduleId' field has been set, false otherwise.
      */
    public boolean hasScheduleId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'scheduleId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearScheduleId() {
      scheduleId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'seatNumber' field.
      * @return The value.
      */
    public java.lang.String getSeatNumber() {
      return seatNumber;
    }


    /**
      * Sets the value of the 'seatNumber' field.
      * @param value The value of 'seatNumber'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setSeatNumber(java.lang.String value) {
      validate(fields()[2], value);
      this.seatNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'seatNumber' field has been set.
      * @return True if the 'seatNumber' field has been set, false otherwise.
      */
    public boolean hasSeatNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'seatNumber' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearSeatNumber() {
      seatNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'seatType' field.
      * @return The value.
      */
    public com.ticketsystem.avro.enums.SeatType getSeatType() {
      return seatType;
    }


    /**
      * Sets the value of the 'seatType' field.
      * @param value The value of 'seatType'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setSeatType(com.ticketsystem.avro.enums.SeatType value) {
      validate(fields()[3], value);
      this.seatType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'seatType' field has been set.
      * @return True if the 'seatType' field has been set, false otherwise.
      */
    public boolean hasSeatType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'seatType' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearSeatType() {
      seatType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setPrice(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearPrice() {
      price = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.ticketsystem.avro.enums.TicketStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setStatus(com.ticketsystem.avro.enums.TicketStatus value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'reservedUntil' field.
      * @return The value.
      */
    public java.time.Instant getReservedUntil() {
      return reservedUntil;
    }


    /**
      * Sets the value of the 'reservedUntil' field.
      * @param value The value of 'reservedUntil'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setReservedUntil(java.time.Instant value) {
      validate(fields()[6], value);
      this.reservedUntil = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'reservedUntil' field has been set.
      * @return True if the 'reservedUntil' field has been set, false otherwise.
      */
    public boolean hasReservedUntil() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'reservedUntil' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearReservedUntil() {
      reservedUntil = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[7], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearCreatedAt() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.booking.Ticket.Builder clearUpdatedAt() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Ticket build() {
      try {
        Ticket record = new Ticket();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.scheduleId = fieldSetFlags()[1] ? this.scheduleId : (java.util.UUID) defaultValue(fields()[1]);
        record.seatNumber = fieldSetFlags()[2] ? this.seatNumber : (java.lang.String) defaultValue(fields()[2]);
        record.seatType = fieldSetFlags()[3] ? this.seatType : (com.ticketsystem.avro.enums.SeatType) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (com.ticketsystem.avro.enums.TicketStatus) defaultValue(fields()[5]);
        record.reservedUntil = fieldSetFlags()[6] ? this.reservedUntil : (java.time.Instant) defaultValue(fields()[6]);
        record.createdAt = fieldSetFlags()[7] ? this.createdAt : (java.time.Instant) defaultValue(fields()[7]);
        record.updatedAt = fieldSetFlags()[8] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Ticket>
    WRITER$ = (org.apache.avro.io.DatumWriter<Ticket>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Ticket>
    READER$ = (org.apache.avro.io.DatumReader<Ticket>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ticketsystem.avro.common;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Standard event envelope header for all domain events. */
@org.apache.avro.specific.AvroGenerated
public class EventHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2122421619383074076L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventHeader\",\"namespace\":\"com.ticketsystem.avro.common\",\"doc\":\"Standard event envelope header for all domain events.\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Originating service (e.g., ms_booking)\"},{\"name\":\"occurredAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"traceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"schemaVersion\",\"type\":\"int\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<EventHeader> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventHeader> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventHeader> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventHeader> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventHeader> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventHeader to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventHeader from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventHeader instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventHeader fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID eventId;
  /** Originating service (e.g., ms_booking) */
  private java.lang.String source;
  private java.time.Instant occurredAt;
  private java.lang.String traceId;
  private int schemaVersion;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventHeader() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param source Originating service (e.g., ms_booking)
   * @param occurredAt The new value for occurredAt
   * @param traceId The new value for traceId
   * @param schemaVersion The new value for schemaVersion
   */
  public EventHeader(java.util.UUID eventId, java.lang.String source, java.time.Instant occurredAt, java.lang.String traceId, java.lang.Integer schemaVersion) {
    this.eventId = eventId;
    this.source = source;
    this.occurredAt = occurredAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.traceId = traceId;
    this.schemaVersion = schemaVersion;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return source;
    case 2: return occurredAt;
    case 3: return traceId;
    case 4: return schemaVersion;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.util.UUID)value$; break;
    case 1: source = value$ != null ? value$.toString() : null; break;
    case 2: occurredAt = (java.time.Instant)value$; break;
    case 3: traceId = value$ != null ? value$.toString() : null; break;
    case 4: schemaVersion = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.util.UUID getEventId() {
    return eventId;
  }



  /**
   * Gets the value of the 'source' field.
   * @return Originating service (e.g., ms_booking)
   */
  public java.lang.String getSource() {
    return source;
  }



  /**
   * Gets the value of the 'occurredAt' field.
   * @return The value of the 'occurredAt' field.
   */
  public java.time.Instant getOccurredAt() {
    return occurredAt;
  }



  /**
   * Gets the value of the 'traceId' field.
   * @return The value of the 'traceId' field.
   */
  public java.lang.String getTraceId() {
    return traceId;
  }



  /**
   * Gets the value of the 'schemaVersion' field.
   * @return The value of the 'schemaVersion' field.
   */
  public int getSchemaVersion() {
    return schemaVersion;
  }



  /**
   * Creates a new EventHeader RecordBuilder.
   * @return A new EventHeader RecordBuilder
   */
  public static com.ticketsystem.avro.common.EventHeader.Builder newBuilder() {
    return new com.ticketsystem.avro.common.EventHeader.Builder();
  }

  /**
   * Creates a new EventHeader RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventHeader RecordBuilder
   */
  public static com.ticketsystem.avro.common.EventHeader.Builder newBuilder(com.ticketsystem.avro.common.EventHeader.Builder other) {
    if (other == null) {
      return new com.ticketsystem.avro.common.EventHeader.Builder();
    } else {
      return new com.ticketsystem.avro.common.EventHeader.Builder(other);
    }
  }

  /**
   * Creates a new EventHeader RecordBuilder by copying an existing EventHeader instance.
   * @param other The existing instance to copy.
   * @return A new EventHeader RecordBuilder
   */
  public static com.ticketsystem.avro.common.EventHeader.Builder newBuilder(com.ticketsystem.avro.common.EventHeader other) {
    if (other == null) {
      return new com.ticketsystem.avro.common.EventHeader.Builder();
    } else {
      return new com.ticketsystem.avro.common.EventHeader.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventHeader instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventHeader>
    implements org.apache.avro.data.RecordBuilder<EventHeader> {

    private java.util.UUID eventId;
    /** Originating service (e.g., ms_booking) */
    private java.lang.String source;
    private java.time.Instant occurredAt;
    private java.lang.String traceId;
    private int schemaVersion;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ticketsystem.avro.common.EventHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.occurredAt)) {
        this.occurredAt = data().deepCopy(fields()[2].schema(), other.occurredAt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.traceId)) {
        this.traceId = data().deepCopy(fields()[3].schema(), other.traceId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.schemaVersion)) {
        this.schemaVersion = data().deepCopy(fields()[4].schema(), other.schemaVersion);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing EventHeader instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ticketsystem.avro.common.EventHeader other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.occurredAt)) {
        this.occurredAt = data().deepCopy(fields()[2].schema(), other.occurredAt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.traceId)) {
        this.traceId = data().deepCopy(fields()[3].schema(), other.traceId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.schemaVersion)) {
        this.schemaVersion = data().deepCopy(fields()[4].schema(), other.schemaVersion);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.util.UUID getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder setEventId(java.util.UUID value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * Originating service (e.g., ms_booking)
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * Originating service (e.g., ms_booking)
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder setSource(java.lang.String value) {
      validate(fields()[1], value);
      this.source = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * Originating service (e.g., ms_booking)
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'source' field.
      * Originating service (e.g., ms_booking)
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder clearSource() {
      source = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'occurredAt' field.
      * @return The value.
      */
    public java.time.Instant getOccurredAt() {
      return occurredAt;
    }


    /**
      * Sets the value of the 'occurredAt' field.
      * @param value The value of 'occurredAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder setOccurredAt(java.time.Instant value) {
      validate(fields()[2], value);
      this.occurredAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'occurredAt' field has been set.
      * @return True if the 'occurredAt' field has been set, false otherwise.
      */
    public boolean hasOccurredAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'occurredAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder clearOccurredAt() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'traceId' field.
      * @return The value.
      */
    public java.lang.String getTraceId() {
      return traceId;
    }


    /**
      * Sets the value of the 'traceId' field.
      * @param value The value of 'traceId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder setTraceId(java.lang.String value) {
      validate(fields()[3], value);
      this.traceId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'traceId' field has been set.
      * @return True if the 'traceId' field has been set, false otherwise.
      */
    public boolean hasTraceId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'traceId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder clearTraceId() {
      traceId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'schemaVersion' field.
      * @return The value.
      */
    public int getSchemaVersion() {
      return schemaVersion;
    }


    /**
      * Sets the value of the 'schemaVersion' field.
      * @param value The value of 'schemaVersion'.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder setSchemaVersion(int value) {
      validate(fields()[4], value);
      this.schemaVersion = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'schemaVersion' field has been set.
      * @return True if the 'schemaVersion' field has been set, false otherwise.
      */
    public boolean hasSchemaVersion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'schemaVersion' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.common.EventHeader.Builder clearSchemaVersion() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventHeader build() {
      try {
        EventHeader record = new EventHeader();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.util.UUID) defaultValue(fields()[0]);
        record.source = fieldSetFlags()[1] ? this.source : (java.lang.String) defaultValue(fields()[1]);
        record.occurredAt = fieldSetFlags()[2] ? this.occurredAt : (java.time.Instant) defaultValue(fields()[2]);
        record.traceId = fieldSetFlags()[3] ? this.traceId : (java.lang.String) defaultValue(fields()[3]);
        record.schemaVersion = fieldSetFlags()[4] ? this.schemaVersion : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventHeader>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventHeader>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventHeader>
    READER$ = (org.apache.avro.io.DatumReader<EventHeader>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











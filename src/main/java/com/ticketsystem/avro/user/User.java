/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ticketsystem.avro.user;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3312922122662319094L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.ticketsystem.avro.user\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"passwordHash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"phoneNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dateOfBirth\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"keycloakUserId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userAvatar\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isActive\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<User> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this User to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a User from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a User instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.lang.String username;
  private java.lang.String email;
  private java.lang.String passwordHash;
  private java.lang.String firstName;
  private java.lang.String lastName;
  private java.lang.String phoneNumber;
  private java.time.LocalDate dateOfBirth;
  private java.time.Instant createdAt;
  private java.time.Instant updatedAt;
  private java.util.UUID keycloakUserId;
  private java.lang.String userAvatar;
  private boolean isActive;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param username The new value for username
   * @param email The new value for email
   * @param passwordHash The new value for passwordHash
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param phoneNumber The new value for phoneNumber
   * @param dateOfBirth The new value for dateOfBirth
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   * @param keycloakUserId The new value for keycloakUserId
   * @param userAvatar The new value for userAvatar
   * @param isActive The new value for isActive
   */
  public User(java.util.UUID id, java.lang.String username, java.lang.String email, java.lang.String passwordHash, java.lang.String firstName, java.lang.String lastName, java.lang.String phoneNumber, java.time.LocalDate dateOfBirth, java.time.Instant createdAt, java.time.Instant updatedAt, java.util.UUID keycloakUserId, java.lang.String userAvatar, java.lang.Boolean isActive) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.passwordHash = passwordHash;
    this.firstName = firstName;
    this.lastName = lastName;
    this.phoneNumber = phoneNumber;
    this.dateOfBirth = dateOfBirth;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.updatedAt = updatedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.keycloakUserId = keycloakUserId;
    this.userAvatar = userAvatar;
    this.isActive = isActive;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return username;
    case 2: return email;
    case 3: return passwordHash;
    case 4: return firstName;
    case 5: return lastName;
    case 6: return phoneNumber;
    case 7: return dateOfBirth;
    case 8: return createdAt;
    case 9: return updatedAt;
    case 10: return keycloakUserId;
    case 11: return userAvatar;
    case 12: return isActive;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: username = value$ != null ? value$.toString() : null; break;
    case 2: email = value$ != null ? value$.toString() : null; break;
    case 3: passwordHash = value$ != null ? value$.toString() : null; break;
    case 4: firstName = value$ != null ? value$.toString() : null; break;
    case 5: lastName = value$ != null ? value$.toString() : null; break;
    case 6: phoneNumber = value$ != null ? value$.toString() : null; break;
    case 7: dateOfBirth = (java.time.LocalDate)value$; break;
    case 8: createdAt = (java.time.Instant)value$; break;
    case 9: updatedAt = (java.time.Instant)value$; break;
    case 10: keycloakUserId = (java.util.UUID)value$; break;
    case 11: userAvatar = value$ != null ? value$.toString() : null; break;
    case 12: isActive = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.String getUsername() {
    return username;
  }



  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }



  /**
   * Gets the value of the 'passwordHash' field.
   * @return The value of the 'passwordHash' field.
   */
  public java.lang.String getPasswordHash() {
    return passwordHash;
  }



  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.String getFirstName() {
    return firstName;
  }



  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }



  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public java.lang.String getPhoneNumber() {
    return phoneNumber;
  }



  /**
   * Gets the value of the 'dateOfBirth' field.
   * @return The value of the 'dateOfBirth' field.
   */
  public java.time.LocalDate getDateOfBirth() {
    return dateOfBirth;
  }



  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }



  /**
   * Gets the value of the 'keycloakUserId' field.
   * @return The value of the 'keycloakUserId' field.
   */
  public java.util.UUID getKeycloakUserId() {
    return keycloakUserId;
  }



  /**
   * Gets the value of the 'userAvatar' field.
   * @return The value of the 'userAvatar' field.
   */
  public java.lang.String getUserAvatar() {
    return userAvatar;
  }



  /**
   * Gets the value of the 'isActive' field.
   * @return The value of the 'isActive' field.
   */
  public boolean getIsActive() {
    return isActive;
  }



  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static com.ticketsystem.avro.user.User.Builder newBuilder() {
    return new com.ticketsystem.avro.user.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static com.ticketsystem.avro.user.User.Builder newBuilder(com.ticketsystem.avro.user.User.Builder other) {
    if (other == null) {
      return new com.ticketsystem.avro.user.User.Builder();
    } else {
      return new com.ticketsystem.avro.user.User.Builder(other);
    }
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static com.ticketsystem.avro.user.User.Builder newBuilder(com.ticketsystem.avro.user.User other) {
    if (other == null) {
      return new com.ticketsystem.avro.user.User.Builder();
    } else {
      return new com.ticketsystem.avro.user.User.Builder(other);
    }
  }

  /**
   * RecordBuilder for User instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.util.UUID id;
    private java.lang.String username;
    private java.lang.String email;
    private java.lang.String passwordHash;
    private java.lang.String firstName;
    private java.lang.String lastName;
    private java.lang.String phoneNumber;
    private java.time.LocalDate dateOfBirth;
    private java.time.Instant createdAt;
    private java.time.Instant updatedAt;
    private java.util.UUID keycloakUserId;
    private java.lang.String userAvatar;
    private boolean isActive;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ticketsystem.avro.user.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.passwordHash)) {
        this.passwordHash = data().deepCopy(fields()[3].schema(), other.passwordHash);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.firstName)) {
        this.firstName = data().deepCopy(fields()[4].schema(), other.firstName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastName)) {
        this.lastName = data().deepCopy(fields()[5].schema(), other.lastName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[6].schema(), other.phoneNumber);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.dateOfBirth)) {
        this.dateOfBirth = data().deepCopy(fields()[7].schema(), other.dateOfBirth);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.keycloakUserId)) {
        this.keycloakUserId = data().deepCopy(fields()[10].schema(), other.keycloakUserId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.userAvatar)) {
        this.userAvatar = data().deepCopy(fields()[11].schema(), other.userAvatar);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.isActive)) {
        this.isActive = data().deepCopy(fields()[12].schema(), other.isActive);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ticketsystem.avro.user.User other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.passwordHash)) {
        this.passwordHash = data().deepCopy(fields()[3].schema(), other.passwordHash);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.firstName)) {
        this.firstName = data().deepCopy(fields()[4].schema(), other.firstName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastName)) {
        this.lastName = data().deepCopy(fields()[5].schema(), other.lastName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[6].schema(), other.phoneNumber);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dateOfBirth)) {
        this.dateOfBirth = data().deepCopy(fields()[7].schema(), other.dateOfBirth);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.keycloakUserId)) {
        this.keycloakUserId = data().deepCopy(fields()[10].schema(), other.keycloakUserId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.userAvatar)) {
        this.userAvatar = data().deepCopy(fields()[11].schema(), other.userAvatar);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.isActive)) {
        this.isActive = data().deepCopy(fields()[12].schema(), other.isActive);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setUsername(java.lang.String value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'passwordHash' field.
      * @return The value.
      */
    public java.lang.String getPasswordHash() {
      return passwordHash;
    }


    /**
      * Sets the value of the 'passwordHash' field.
      * @param value The value of 'passwordHash'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setPasswordHash(java.lang.String value) {
      validate(fields()[3], value);
      this.passwordHash = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'passwordHash' field has been set.
      * @return True if the 'passwordHash' field has been set, false otherwise.
      */
    public boolean hasPasswordHash() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'passwordHash' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearPasswordHash() {
      passwordHash = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setFirstName(java.lang.String value) {
      validate(fields()[4], value);
      this.firstName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setLastName(java.lang.String value) {
      validate(fields()[5], value);
      this.lastName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public java.lang.String getPhoneNumber() {
      return phoneNumber;
    }


    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setPhoneNumber(java.lang.String value) {
      validate(fields()[6], value);
      this.phoneNumber = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearPhoneNumber() {
      phoneNumber = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateOfBirth' field.
      * @return The value.
      */
    public java.time.LocalDate getDateOfBirth() {
      return dateOfBirth;
    }


    /**
      * Sets the value of the 'dateOfBirth' field.
      * @param value The value of 'dateOfBirth'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setDateOfBirth(java.time.LocalDate value) {
      validate(fields()[7], value);
      this.dateOfBirth = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'dateOfBirth' field has been set.
      * @return True if the 'dateOfBirth' field has been set, false otherwise.
      */
    public boolean hasDateOfBirth() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'dateOfBirth' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearDateOfBirth() {
      dateOfBirth = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearCreatedAt() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[9], value);
      this.updatedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearUpdatedAt() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'keycloakUserId' field.
      * @return The value.
      */
    public java.util.UUID getKeycloakUserId() {
      return keycloakUserId;
    }


    /**
      * Sets the value of the 'keycloakUserId' field.
      * @param value The value of 'keycloakUserId'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setKeycloakUserId(java.util.UUID value) {
      validate(fields()[10], value);
      this.keycloakUserId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'keycloakUserId' field has been set.
      * @return True if the 'keycloakUserId' field has been set, false otherwise.
      */
    public boolean hasKeycloakUserId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'keycloakUserId' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearKeycloakUserId() {
      keycloakUserId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'userAvatar' field.
      * @return The value.
      */
    public java.lang.String getUserAvatar() {
      return userAvatar;
    }


    /**
      * Sets the value of the 'userAvatar' field.
      * @param value The value of 'userAvatar'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setUserAvatar(java.lang.String value) {
      validate(fields()[11], value);
      this.userAvatar = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'userAvatar' field has been set.
      * @return True if the 'userAvatar' field has been set, false otherwise.
      */
    public boolean hasUserAvatar() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'userAvatar' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearUserAvatar() {
      userAvatar = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'isActive' field.
      * @return The value.
      */
    public boolean getIsActive() {
      return isActive;
    }


    /**
      * Sets the value of the 'isActive' field.
      * @param value The value of 'isActive'.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder setIsActive(boolean value) {
      validate(fields()[12], value);
      this.isActive = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'isActive' field has been set.
      * @return True if the 'isActive' field has been set, false otherwise.
      */
    public boolean hasIsActive() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'isActive' field.
      * @return This builder.
      */
    public com.ticketsystem.avro.user.User.Builder clearIsActive() {
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.String) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.String) defaultValue(fields()[2]);
        record.passwordHash = fieldSetFlags()[3] ? this.passwordHash : (java.lang.String) defaultValue(fields()[3]);
        record.firstName = fieldSetFlags()[4] ? this.firstName : (java.lang.String) defaultValue(fields()[4]);
        record.lastName = fieldSetFlags()[5] ? this.lastName : (java.lang.String) defaultValue(fields()[5]);
        record.phoneNumber = fieldSetFlags()[6] ? this.phoneNumber : (java.lang.String) defaultValue(fields()[6]);
        record.dateOfBirth = fieldSetFlags()[7] ? this.dateOfBirth : (java.time.LocalDate) defaultValue(fields()[7]);
        record.createdAt = fieldSetFlags()[8] ? this.createdAt : (java.time.Instant) defaultValue(fields()[8]);
        record.updatedAt = fieldSetFlags()[9] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[9]);
        record.keycloakUserId = fieldSetFlags()[10] ? this.keycloakUserId : (java.util.UUID) defaultValue(fields()[10]);
        record.userAvatar = fieldSetFlags()[11] ? this.userAvatar : (java.lang.String) defaultValue(fields()[11]);
        record.isActive = fieldSetFlags()[12] ? this.isActive : (java.lang.Boolean) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











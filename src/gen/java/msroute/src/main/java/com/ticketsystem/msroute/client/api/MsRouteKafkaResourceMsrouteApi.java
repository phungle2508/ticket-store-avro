/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ticketsystem.msroute.client.api;

import com.ticketsystem.msroute.client.model.ResponseBodyEmitterDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "ms-route-kafka-resource", description = "the ms-route-kafka-resource API")
public interface MsRouteKafkaResourceMsrouteApi {

    /**
     * POST /api/ms-route-kafka/publish
     *
     * @param message  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "publish",
        tags = { "ms-route-kafka-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ms-route-kafka/publish"
    )
    
    ResponseEntity<Void> publish(
        @NotNull @Parameter(name = "message", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "message", required = true) String message
    );


    /**
     * GET /api/ms-route-kafka/register
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "register",
        tags = { "ms-route-kafka-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseBodyEmitterDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ms-route-kafka/register",
        produces = { "*/*" }
    )
    
    ResponseEntity<ResponseBodyEmitterDto> register(
        
    );


    /**
     * GET /api/ms-route-kafka/unregister
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "unregister",
        tags = { "ms-route-kafka-resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ms-route-kafka/unregister"
    )
    
    ResponseEntity<Void> unregister(
        
    );

}

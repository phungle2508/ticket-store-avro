name: üöÄ Deploy Microservice to VPS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: secrets
    
    steps:
      # First, checkout the repository
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper git operations
          fetch-depth: 0
          # Use a token that has push permissions
          token: ${{ secrets.GITHUB_TOKEN }}

      # Then configure Git identity (now we're in a git directory)
      - name: üîß Configure Git identity
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Deploy to VPS
      - name: üì¶ SSH Deploy to VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          port: 22
          script: |
            set -euo pipefail
            ticketsystem_avro_DIR="/root/f4-microserices-vps-configuration/ticket-store/backend/ticketsystem-avro"
            echo "üìÅ Navigating to project directory..."
            cd "$ticketsystem_avro_DIR"
            rm -rf src/main/java
            export KEYCLOAK_USERNAME='${{ secrets.KEYCLOAK_USERNAME }}'
            export KEYCLOAK_PASSWORD='${{ secrets.KEYCLOAK_PASSWORD }}'
            mvn -v
            mvn -e -U -B clean package -Prun-openapi

      # ---- GIT: TRIGGER ----
      - name: üì§ Push code to GitHub (origin)
        run: |
          # Push current HEAD to desired branch. Adjust 'master' -> 'main' if needed.
          git push origin HEAD:master

      # ---- JitPack: TRIGGER & CHECK ----
      - name: üîî Trigger JitPack build (master-SNAPSHOT)
        run: |
          set -euo pipefail
          # Hitting build.log for a SNAPSHOT triggers a build if needed
          curl -sS --max-time 5 "https://jitpack.io/com/github/phungle2508/ticket-store-avro/master-SNAPSHOT/build.log" || true

      - name: üîé Wait for JitPack build(s) to complete
        run: |
          set -euo pipefail
          sleep 5
          echo "‚è≥ Waiting for JitPack builds to finish for com.github.phungle2508:ticket-store-avro ..."
      
          MAX_ATTEMPTS=30  # 30 * 5s = 2.5 minutes
          ATTEMPT=1
          API_URL="https://jitpack.io/api/builds/com.github.phungle2508/ticket-store-avro"
      
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "üîç Attempt $ATTEMPT/$MAX_ATTEMPTS - Checking build statuses..."
      
            RESPONSE="$(curl -sS "$API_URL" || true)"
            echo "JITPACK_BUILDS: $RESPONSE"
      
            # If response is empty or invalid, try again
            if [ -z "$RESPONSE" ] || ! echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
              echo "‚ö†Ô∏è  No/invalid response from JitPack API; retrying in 5s..."
              sleep 5
              ATTEMPT=$((ATTEMPT + 1))
              continue
            fi
      
            # Pull the whole versions->status map
            VERSIONS_NODE=$(echo "$RESPONSE" | jq -r '."com.github.phungle2508"."ticket-store-avro" // {}')
      
            # If no versions found, treat as success (nothing building)
            if [ "$(echo "$VERSIONS_NODE" | jq 'length')" -eq 0 ]; then
              echo "‚úÖ No versions found (nothing building)."
              exit 0
            fi
      
            # List versions that are currently Building
            BUILDING_LIST=$(echo "$VERSIONS_NODE" | jq -r 'to_entries | map(select(.value=="Building")) | map(.key) | join(", ")')
            BUILDING_COUNT=$(echo "$VERSIONS_NODE" | jq -r 'to_entries | map(select(.value=="Building")) | length')
      
            # Optionally log other statuses (ok/Error) for visibility
            OK_LIST=$(echo "$VERSIONS_NODE" | jq -r 'to_entries | map(select(.value=="ok")) | map(.key) | join(", ")')
            ERR_LIST=$(echo "$VERSIONS_NODE" | jq -r 'to_entries | map(select(.value=="Error")) | map(.key) | join(", ")')
      
            echo "üìä ok:      ${OK_LIST:-<none>}"
            echo "üìä Error:   ${ERR_LIST:-<none>}"
            echo "üìä Building:${BUILDING_LIST:-<none>}"
      
            if [ "$BUILDING_COUNT" -gt 0 ]; then
              echo "‚è≥ Still building ($BUILDING_COUNT version(s))... sleeping 5s"
              sleep 5
            else
              echo "‚úÖ No builds in 'Building' state. Done."
              exit 0
            fi
      
            ATTEMPT=$((ATTEMPT + 1))
          done
      
          echo "‚è∞ Timeout after $MAX_ATTEMPTS attempts."
          echo "üîç Final status:"
          curl -sS "$API_URL" | jq . | sed -e 's/^/FINAL_STATUS: /'
          exit 1


      - name: ‚úÖ Get latest successful build (latestOk)
        run: |
          set -euo pipefail
          curl -sS "https://jitpack.io/api/builds/com.github.phungle2508/ticket-store-avro/latestOk" | jq . | sed -e 's/^/JITPACK_LATEST_OK: /'
